{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>KInfo allows to access the device details of <code>android</code>, <code>iOS</code>, <code>desktop</code> e <code>web</code> devices</p>"},{"location":"#implementation","title":"Implementation","text":""},{"location":"#gradle-short","title":"Gradle short","text":"<pre><code>dependencies {\n    implementation 'io.github.n7ghtm4r3:kinfo:1.0.4'\n}\n</code></pre>"},{"location":"#gradle-kotlin","title":"Gradle (Kotlin)","text":"<pre><code>dependencies {\n    implementation(\"io.github.n7ghtm4r3:kinfo:1.0.4\")\n}\n</code></pre>"},{"location":"#gradle-version-catalog","title":"Gradle (version catalog)","text":""},{"location":"#libsversionstoml","title":"libs.versions.toml","text":"<pre><code>[versions]\nkinfo = \"1.0.4\"\n\n[libraries]\nkinfo = { module = \"io.github.n7ghtm4r3:kinfo\", version.ref = \"kinfo\" }\n</code></pre>"},{"location":"#buildgradlekts","title":"build.gradle.kts","text":"<pre><code>dependencies {\n    implementation(libs.kinfo)\n}\n</code></pre>"},{"location":"#information-available","title":"Information available","text":"<p>Take a look to related documentation about the information available for each platform</p> <ul> <li>Android</li> <li>iOS</li> <li>Desktop</li> <li>Web</li> </ul> <p>Will be gradually added new information for each platform</p>"},{"location":"#support","title":"Support","text":"<p>If you need help using the library or encounter any problems or bugs, please contact us via the following links:</p> <ul> <li>Support via email</li> <li>Support via GitHub</li> </ul> <p>Thank you for your help!</p>"},{"location":"#donations","title":"Donations","text":"<p>If you want support project and developer</p> Crypto Address Network 3H3jyCzcRmnxroHthuXh22GXXSmizin2yp Bitcoin 0x1b45bc41efeb3ed655b078f95086f25fc83345c4 Ethereum AtPjUnxYFHw3a6Si9HinQtyPTqsdbfdKX3dJ1xiDjbrL Solana <p>If you want support project and developer with PayPal</p>"},{"location":"#licence","title":"Licence","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Swapnil Musale\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>Copyright \u00a9 2025 Tecknobit</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#composable-invocation","title":"Composable invocation","text":"<p>In <code>composable</code> contexts you can use the dedicated <code>OnPlatform</code> method to directly retrieve the device information in the  <code>commonMain</code>, avoiding the need to create a dedicated <code>expect/actual</code> mechanism. Below is an example of its usage:</p> <pre><code>OnPlatform(\n    onAndroid = { androidInfo -&gt;\n        // uses the Android information retrieved\n        Text(\n            text = androidInfo.model\n        )\n    },\n    onIos = { iosInfo -&gt;\n        // uses the iOs information retrieved\n        Text(\n            text = iosInfo.model\n        )\n    },\n    onDesktop = { desktopInfo -&gt;\n        // uses the desktop information retrieved\n        Text(\n            text = desktopInfo.hardware.computerSystem.model // hardware information\n        )\n        Text(\n            text = desktopInfo.operatingSystem.versionInfo.codeName // operating system information\n        )\n    },\n    onWeb = { webInfo: WebInfo -&gt;\n        // uses the web information retrieved\n        Text(\n            text = webInfo.browser.name\n        )\n    }\n)\n</code></pre>"},{"location":"usage/#non-composable-invocation","title":"Non-composable invocation","text":"<p>Similar to composable contexts, you can use the dedicated <code>onPlatform</code> method outside composable contexts, where composition  is not needed, to directly retrieve device information in <code>commonMain</code>, avoiding the need to create a dedicated <code>expect/actual</code> mechanism. Below is an example of its usage:</p> <pre><code>onPlatform(\n    onAndroid = { androidInfo -&gt;\n        // uses the Android information retrieved\n        println(androidInfo.model)\n    },\n    onIos = { iosInfo -&gt;\n        // uses the iOs information retrieved\n        println(iosInfo.model)\n    },\n    onDesktop = { desktopInfo -&gt;\n        // uses the desktop information retrieved\n        println(desktopInfo.hardware.computerSystem.model) // hardware information\n        println(desktopInfo.operatingSystem.versionInfo.codeName) // operating system information\n    },\n    onWeb = { webInfo: WebInfo -&gt;\n        // uses the web information retrieved\n        println(webInfo.browser.name)\n    }\n)\n</code></pre>"},{"location":"android/","title":"Overview","text":""},{"location":"android/#available-information","title":"Available information","text":"<p>On Android target are available the below information:</p> Category Property Description Source App Info <code>appName</code> The name of the application <code>PackageInfo.applicationInfo</code> <code>packageName</code> The package name of the application <code>Context.packageName</code> <code>versionName</code> The version name of the application <code>PackageInfo.versionName</code> <code>versionCode</code> The version code of the application <code>PackageInfoCompat</code> <code>isDebug</code> Indicates whether the application is the debug build <code>BuildConfig.DEBUG</code> OS Info <code>version</code> Details about the Android OS version <code>AndroidVersionImpl</code> <code>VERSION_CODES</code> Enumerated version codes for Android <code>AndroidVersionCodeImpl</code> <code>androidId</code> Unique Android ID of the device <code>Settings.Secure.ANDROID_ID</code> <code>androidCodename</code> Android codename of the device Custom Logic Device Info <code>board</code> The board name of the device hardware <code>Build.BOARD</code> <code>bootloader</code> The version of the device bootloader <code>Build.BOOTLOADER</code> <code>device</code> The device name <code>Build.DEVICE</code> <code>display</code> The display identifier for the build <code>Build.DISPLAY</code> <code>fingerprint</code> Unique identifier for the build fingerprint <code>Build.FINGERPRINT</code> <code>hardware</code> The name of the device hardware <code>Build.HARDWARE</code> <code>host</code> The host name used to build the system <code>Build.HOST</code> <code>id</code> The build ID for the software <code>Build.ID</code> <code>manufacturer</code> The manufacturer name of the device <code>Build.MANUFACTURER</code> <code>model</code> The model name of the device <code>Build.MODEL</code> <code>brand</code> The brand name of the device <code>Build.BRAND</code> <code>product</code> The product name of the device <code>Build.PRODUCT</code> <code>deviceOrientation</code> Current orientation of the device <code>AndroidDeviceOrientation</code> Supported ABIs <code>supportedAbis</code> List of supported ABIs for the device <code>Build.SUPPORTED_ABIS</code> <code>supported32BitAbis</code> List of supported 32-bit ABIs for the device <code>Build.SUPPORTED_32_BIT_ABIS</code> <code>supported64BitAbis</code> List of supported 64-bit ABIs for the device <code>Build.SUPPORTED_64_BIT_ABIS</code> Tags <code>tags</code> Comma-separated tags associated with the build <code>Build.TAGS</code> <code>isPhysicalDevice</code> Indicates if the device is physical or an emulator Custom Logic System Features <code>systemFeatureList</code> List of system features available on the device <code>PackageManager.systemFeatures</code> Display Info <code>displayMetrics</code> Display metrics containing screen properties <code>AndroidDisplayMetricsImpl</code> Locale Info <code>locale</code> Locale information (language and region) <code>LocaleManagerCompat</code>"},{"location":"android/#api-source","title":"API source","text":"<p>The information are retrievable using the <code>AndroidInfo</code> API:</p>"},{"location":"android/#composable-context","title":"Composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside composable context</p> <pre><code>val kInfoState = rememberKInfoState()\n</code></pre>"},{"location":"android/#non-composable-context","title":"Non-composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside non-composable context</p> <pre><code>val kInfoState = KInfoState()\n</code></pre>"},{"location":"android/#androidinfo","title":"AndroidInfo","text":"<p>Retrieve a <code>AndroidInfo</code> instance from <code>kInfoState</code> instance</p> <pre><code>val androidInfo = kInfoState.androidInfo \n</code></pre> <p>Warning</p> <p>You can directly retrieve <code>androidInfo</code> just inside the <code>androidMain</code> module, in the <code>commonMain</code> module you have to use the common usage instead, or the application will crash</p>"},{"location":"android/abis/","title":"ABIs","text":"<p>The ABIs information refers to supported Application Binary Interface the device supports</p>"},{"location":"android/abis/#supportedabis","title":"supportedAbis","text":"<p>List of supported ABIs for the device</p>"},{"location":"android/abis/#original-source","title":"Original source","text":"<p>The array is retrieved from <code>Build.SUPPORTED_ABIS</code> property</p>"},{"location":"android/abis/#kinfos-source","title":"KInfo's source","text":"<pre><code>val supportedAbis: Array&lt;String&gt; = androidInfo.supportedAbis\n\nprintln(supportedAbis) // e.g. [x86_64, arm64-v8a]\n</code></pre>"},{"location":"android/abis/#supported32bitabis","title":"supported32BitAbis","text":"<p>List of supported 32-bit ABIs for the device</p>"},{"location":"android/abis/#original-source_1","title":"Original source","text":"<p>The array is retrieved from <code>Build.SUPPORTED_32_BIT_ABIS</code> property</p>"},{"location":"android/abis/#kinfos-source_1","title":"KInfo's source","text":"<pre><code>val supported32BitAbis: Array&lt;String&gt; = androidInfo.supported32BitAbis\n\nprintln(supported32BitAbis) // e.g. [x86]\n</code></pre>"},{"location":"android/abis/#supported64bitabis","title":"supported64BitAbis","text":"<p>List of supported 64-bit ABIs for the device</p>"},{"location":"android/abis/#original-source_2","title":"Original source","text":"<p>The array is retrieved from <code>Build.SUPPORTED_64_BIT_ABIS</code> property</p>"},{"location":"android/abis/#kinfos-source_2","title":"KInfo's source","text":"<pre><code>val supported64BitAbis: Array&lt;String&gt; = androidInfo.supported64BitAbis\n\nprintln(supported64BitAbis) // e.g. [x86_64]\n</code></pre>"},{"location":"android/app_info/","title":"App info","text":"<p>The application information refers to the details of the application in which <code>KInfo</code> is currently used</p>"},{"location":"android/app_info/#appname","title":"appName","text":"<p>The name of the application</p>"},{"location":"android/app_info/#original-source","title":"Original source","text":"<p>The application name is retrieved from <code>PackageInfo.applicationInfo</code> property</p>"},{"location":"android/app_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val appName: String = androidInfo.appName\n\nprintln(appName) // e.g. KInfoDemo\n</code></pre>"},{"location":"android/app_info/#packagename","title":"packageName","text":"<p>The package name of the application</p>"},{"location":"android/app_info/#original-source_1","title":"Original source","text":"<p>The package name of the application is retrieved from <code>Context.packageName</code> property</p>"},{"location":"android/app_info/#kinfos-source_1","title":"KInfo's source","text":"<pre><code>val packageName: String = androidInfo.packageName\n\nprintln(packageName) // e.g. com.tecknobit.kinfodemo\n</code></pre>"},{"location":"android/app_info/#versionname","title":"versionName","text":"<p>The version name of the application</p>"},{"location":"android/app_info/#original-source_2","title":"Original source","text":"<p>The version name of the application is retrieved from <code>PackageInfo.versionName</code> property</p>"},{"location":"android/app_info/#kinfos-source_2","title":"KInfo's source","text":"<pre><code>val versionName: String = androidInfo.versionName\n\nprintln(versionName) // e.g. 1.0.0\n</code></pre>"},{"location":"android/app_info/#versioncode","title":"versionCode","text":"<p>The version code of the application</p>"},{"location":"android/app_info/#original-source_3","title":"Original source","text":"<p>The version code of the application is retrieved from <code>PackageInfoCompat.getLongVersionCode(packageInfo)</code> property</p>"},{"location":"android/app_info/#kinfos-source_3","title":"KInfo's source","text":"<pre><code>val versionCode: String = androidInfo.versionCode\n\nprintln(versionCode) // e.g. 1\n</code></pre>"},{"location":"android/app_info/#isdebug","title":"isDebug","text":"<p>Indicates whether the application is the debug build</p>"},{"location":"android/app_info/#original-source_4","title":"Original source","text":"<p><code>isDebug</code> value is retrieved from <code>BuildConfig.DEBUG</code> property</p>"},{"location":"android/app_info/#kinfos-source_4","title":"KInfo's source","text":"<pre><code>val isDebug: Boolean = androidInfo.isDebug\n\nprintln(isDebug) // true or false\n</code></pre>"},{"location":"android/device_info/","title":"Device info","text":"<p>The device information refers to the details of the device on which the application using KInfo is currently running</p>"},{"location":"android/device_info/#board","title":"board","text":"<p>The board name of the device hardware</p>"},{"location":"android/device_info/#original-source","title":"Original source","text":"<p>The board name is retrieved from <code>Build.BOARD</code> property</p>"},{"location":"android/device_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val board: String = androidInfo.board\n\nprintln(board) // e.g. goldfish_x86_64\n</code></pre>"},{"location":"android/device_info/#bootloader","title":"bootloader","text":"<p>The version of the device bootloader</p>"},{"location":"android/device_info/#original-source_1","title":"Original source","text":"<p>The version of the bootloader is retrieved from <code>Build.BOOTLOADER</code> property</p>"},{"location":"android/device_info/#kinfos-source_1","title":"KInfo's source","text":"<pre><code>val bootloader: String = androidInfo.bootloader\n\nprintln(bootloader) // e.g. S901EXXU4BWA1\n</code></pre>"},{"location":"android/device_info/#device","title":"device","text":"<p>The device name</p>"},{"location":"android/device_info/#original-source_2","title":"Original source","text":"<p>The device name is retrieved from <code>Build.DEVICE</code> property</p>"},{"location":"android/device_info/#kinfos-source_2","title":"KInfo's source","text":"<pre><code>val device: String = androidInfo.device\n\nprintln(device) // e.g. emu64xa\n</code></pre>"},{"location":"android/device_info/#display","title":"display","text":"<p>The display identifier for the build</p>"},{"location":"android/device_info/#original-source_3","title":"Original source","text":"<p>The display identifier is retrieved from <code>Build.DISPLAY</code> property</p>"},{"location":"android/device_info/#kinfos-source_3","title":"KInfo's source","text":"<pre><code>val display: String = androidInfo.display\n\nprintln(display) // e.g. UE1A.230829.036.A4\n</code></pre>"},{"location":"android/device_info/#fingerprint","title":"fingerprint","text":"<p>Unique identifier for the build fingerprint</p>"},{"location":"android/device_info/#original-source_4","title":"Original source","text":"<p>The identifier is retrieved from <code>Build.FINGERPRINT</code> property</p>"},{"location":"android/device_info/#kinfos-source_4","title":"KInfo's source","text":"<pre><code>val fingerprint: String = androidInfo.fingerprint\n\nprintln(fingerprint) \n// e.g. google/sdk_gphone64_x86_64/emu64xa:14/UE1A.230829.036.A4/12096271:user/release-keys\n</code></pre>"},{"location":"android/device_info/#hardware","title":"hardware","text":"<p>The name of the device hardware</p>"},{"location":"android/device_info/#original-source_5","title":"Original source","text":"<p>The hardware value is retrieved from <code>Build.HARDWARE</code> property</p>"},{"location":"android/device_info/#kinfos-source_5","title":"KInfo's source","text":"<pre><code>val hardware: String = androidInfo.hardware\n\nprintln(hardware) // e.g. ranchu\n</code></pre>"},{"location":"android/device_info/#host","title":"host","text":"<p>The host name used to build the system</p>"},{"location":"android/device_info/#original-source_6","title":"Original source","text":"<p>The host name is retrieved from <code>Build.HOST</code> property</p>"},{"location":"android/device_info/#kinfos-source_6","title":"KInfo's source","text":"<pre><code>val host: String = androidInfo.host\n\nprintln(host) // e.g. r-d3d21742fc70d910-x2hk\n</code></pre>"},{"location":"android/device_info/#id","title":"id","text":"<p>The build ID for the software</p>"},{"location":"android/device_info/#original-source_7","title":"Original source","text":"<p>The build identifier is retrieved from <code>Build.ID</code> property</p>"},{"location":"android/device_info/#kinfos-source_7","title":"KInfo's source","text":"<pre><code>val id: String = androidInfo.id\n\nprintln(id) // e.g. UE1A.230829.036.A4\n</code></pre>"},{"location":"android/device_info/#manufacturer","title":"manufacturer","text":"<p>The manufacturer name of the device</p>"},{"location":"android/device_info/#original-source_8","title":"Original source","text":"<p>The manufacturer value is retrieved from <code>Build.MANUFACTURER</code> property</p>"},{"location":"android/device_info/#kinfos-source_8","title":"KInfo's source","text":"<pre><code>val manufacturer: String = androidInfo.manufacturer\n\nprintln(manufacturer) // e.g. Google\n</code></pre>"},{"location":"android/device_info/#model","title":"model","text":"<p>The model name of the device</p>"},{"location":"android/device_info/#original-source_9","title":"Original source","text":"<p>The model name is retrieved from <code>Build.MODEL</code> property</p>"},{"location":"android/device_info/#kinfos-source_9","title":"KInfo's source","text":"<pre><code>val model: String = androidInfo.model\n\nprintln(model) // e.g. Pixel 7\n</code></pre>"},{"location":"android/device_info/#brand","title":"brand","text":"<p>The brand name of the device</p>"},{"location":"android/device_info/#original-source_10","title":"Original source","text":"<p>The brand name is retrieved from <code>Build.BRAND</code> property</p>"},{"location":"android/device_info/#kinfos-source_10","title":"KInfo's source","text":"<pre><code>val brand: String = androidInfo.brand\n\nprintln(brand) // e.g. Google\n</code></pre>"},{"location":"android/device_info/#product","title":"product","text":"<p>The product name of the device</p>"},{"location":"android/device_info/#original-source_11","title":"Original source","text":"<p>The product name is retrieved from <code>Build.PRODUCT</code> property</p>"},{"location":"android/device_info/#kinfos-source_11","title":"KInfo's source","text":"<pre><code>val product: String = androidInfo.product\n\nprintln(product) // e.g. cheetah\n</code></pre>"},{"location":"android/device_info/#deviceorientation","title":"deviceOrientation","text":"<p>The current orientation of the device</p>"},{"location":"android/device_info/#original-source_12","title":"Original source","text":"<p>The orientation value is retrieved from <code>Context.resources.configuration.orientation</code> property</p>"},{"location":"android/device_info/#kinfos-source_12","title":"KInfo's source","text":"<pre><code>val deviceOrientation: DeviceOrientation = androidInfo.deviceOrientation\n</code></pre>"},{"location":"android/device_info/#properties","title":"Properties","text":""},{"location":"android/device_info/#isportrait","title":"isPortrait","text":"<p>Whether the device is currently in portrait mode</p> <pre><code>val isPortrait: Boolean = deviceOrientation.isPortrait\n\nprintln(isPortrait) // true or false\n</code></pre>"},{"location":"android/device_info/#islandscape","title":"isLandscape","text":"<p>Whether the device is currently in landscape mode</p> <pre><code>val isLandscape: Boolean = deviceOrientation.isLandscape\n\nprintln(isLandscape) // true or false\n</code></pre>"},{"location":"android/display_info/","title":"Display info","text":"<p>Information refer to the display of the device</p>"},{"location":"android/display_info/#displaymetrics","title":"displayMetrics","text":"<p>Display metrics containing screen properties</p>"},{"location":"android/display_info/#original-source","title":"Original source","text":"<p>The display metrics are retrieved from <code>android.util.DisplayMetrics</code> property</p>"},{"location":"android/display_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val displayMetrics: DisplayMetrics = androidInfo.displayMetrics\n</code></pre>"},{"location":"android/display_info/#properties","title":"Properties","text":""},{"location":"android/display_info/#widthinches","title":"widthInches","text":"<p>The width of the display in inches</p> <pre><code>val widthInches: Double = displayMetrics.widthInches\n\nprintln(widthInches) // e.g. 2.4545454545454546\n</code></pre>"},{"location":"android/display_info/#heightinches","title":"heightInches","text":"<p>The height of the display in inches</p> <pre><code>val heightInches: Double = displayMetrics.heightInches\n\nprintln(heightInches) // e.g. 4.8954545454545455\n</code></pre>"},{"location":"android/display_info/#xdpi","title":"xDpi","text":"<p>The screen's horizontal density in dots per inch (DPI)</p> <pre><code>val xDpi: Double = displayMetrics.xDpi\n\nprintln(xDpi) // e.g. 440.0\n</code></pre>"},{"location":"android/display_info/#ydpi","title":"yDpi","text":"<p>The screen's vertical density in dots per inch (DPI)</p> <pre><code>val yDpi: Double = displayMetrics.yDpi\n\nprintln(yDpi) // e.g. 440.0\n</code></pre>"},{"location":"android/locale_info/","title":"Locale info","text":"<p>Information refer to the locale set on the device</p>"},{"location":"android/locale_info/#locale","title":"locale","text":"<p>Locale information (language and region)</p>"},{"location":"android/locale_info/#original-source","title":"Original source","text":"<p>The locale value is retrieved with <code>LocaleManagerCompat.getSystemLocales</code> method</p>"},{"location":"android/locale_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val locale: Locale = androidInfo.locale\n\nprintln(locale) // e.g. Locale(languageCode=it, region=IT)\n</code></pre>"},{"location":"android/os_info/","title":"OS info","text":"<p>The OS information refers to the details of the operating system of the device on which the application using KInfo is  currently running</p>"},{"location":"android/os_info/#version","title":"version","text":"<p>Details about the Android OS version</p>"},{"location":"android/os_info/#original-source","title":"Original source","text":"<p>The details about the Android OS version are retrieved from <code>AndroidVersionImpl</code> class</p>"},{"location":"android/os_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val version: Version = androidInfo.version\n</code></pre>"},{"location":"android/os_info/#properties","title":"Properties","text":""},{"location":"android/os_info/#baseos","title":"baseOs","text":"<p>The base operating system version of the Android device, when empty means that is an Android stock version</p> <pre><code>val baseOs: String = version.baseOs\n\nprintln(baseOs) // e.g. empty or similar to R16NW/G960FXXU2BRJ6\n</code></pre>"},{"location":"android/os_info/#sdkint","title":"sdkInt","text":"<p>The integer value of the current Android SDK version</p> <pre><code>val sdkInt: Int = version.sdkInt\n\nprintln(sdkInt) // e.g. 36\n</code></pre>"},{"location":"android/os_info/#codename","title":"codeName","text":"<p>The code name of the current Android version</p> <pre><code>val codeName: String = version.codeName\n\nprintln(codeName) // e.g. Baklava\n</code></pre>"},{"location":"android/os_info/#release","title":"release","text":"<p>The string value representing the release version of the Android operating system</p> <pre><code>val release: String = version.release\n\nprintln(release) // e.g. 16\n</code></pre>"},{"location":"android/os_info/#incremental","title":"incremental","text":"<p>The incremental version string, often used for identifying minor updates</p> <pre><code>val incremental: String = version.incremental\n\nprintln(incremental) // e.g. 12096271\n</code></pre>"},{"location":"android/os_info/#releaseorcodename","title":"releaseOrCodeName","text":"<p>Value can be either the release version or the code name of the Android version</p> <pre><code>val releaseOrCodeName: String = version.releaseOrCodeName\n\nprintln(releaseOrCodeName) // e.g. 16 or Baklava\n</code></pre>"},{"location":"android/os_info/#releaseorpreviewdisplay","title":"releaseOrPreviewDisplay","text":"<p>Value can be either the release version or preview display name (if in preview mode)</p> <pre><code>val releaseOrPreviewDisplay: String = version.releaseOrPreviewDisplay\n\nprintln(releaseOrPreviewDisplay) // e.g. Android 16 Preview\n</code></pre>"},{"location":"android/os_info/#securitypatch","title":"securityPatch","text":"<p>The security patch level of the current Android version</p> <pre><code>val securityPatch: String = version.securityPatch\n\nprintln(securityPatch) // e.g. 2025-10-14\n</code></pre>"},{"location":"android/os_info/#mediaperformanceclass","title":"mediaPerformanceClass","text":"<p>The media performance class of the Android device (used to indicate the media performance tier)</p> <pre><code>val mediaPerformanceClass: Int = version.mediaPerformanceClass\n\nprintln(mediaPerformanceClass) // e.g. from 0 to 3 or more\n</code></pre>"},{"location":"android/os_info/#previewsdkint","title":"previewSdkInt","text":"<p>The SDK version of the preview release (if any), if 0 is a stable release, otherwise is an experimental release and indicates which release step is the current release, such Beta 2 </p> <pre><code>val previewSdkInt: Int = version.previewSdkInt\n\nprintln(previewSdkInt) // e.g. 2\n</code></pre>"},{"location":"android/os_info/#version_codes","title":"VERSION_CODES","text":"<p>Enumerated version codes for Android</p>"},{"location":"android/os_info/#original-source_1","title":"Original source","text":"<p>The enum entries are retrieved from <code>Build.VERSION_CODES</code> constants</p>"},{"location":"android/os_info/#kinfos-source_1","title":"KInfo's source","text":"<pre><code>val versionCode: VersionCode = androidInfo.VERSION_CODES\n</code></pre>"},{"location":"android/os_info/#entries","title":"Entries","text":""},{"location":"android/os_info/#cur_development","title":"CUR_DEVELOPMENT","text":"<p>The current development version of Android (for testing purposes)</p> <pre><code>println(versionCode.CUR_DEVELOPMENT) // e.g. 10000\n</code></pre>"},{"location":"android/os_info/#cupcake","title":"CUPCAKE","text":"<p>The version code for Android 1.5</p> <pre><code>println(versionCode.CUPCAKE) // 3\n</code></pre>"},{"location":"android/os_info/#donut","title":"DONUT","text":"<p>The version code for Android 1.6</p> <pre><code>println(versionCode.DONUT) // 4\n</code></pre>"},{"location":"android/os_info/#lollipop","title":"LOLLIPOP","text":"<p>The version code for Android Lollipop</p> <pre><code>println(versionCode.LOLLIPOP) // 21\n</code></pre>"},{"location":"android/os_info/#lollipop_mr1","title":"LOLLIPOP_MR1","text":"<p>The version code for Android Lollipop MR1</p> <pre><code>println(versionCode.LOLLIPOP_MR1) // 22\n</code></pre>"},{"location":"android/os_info/#m","title":"M","text":"<p>The version code for Android Marshmallow</p> <pre><code>println(versionCode.M) // 23\n</code></pre>"},{"location":"android/os_info/#n","title":"N","text":"<p>The version code for Android Nougat</p> <pre><code>println(versionCode.N) // 24\n</code></pre>"},{"location":"android/os_info/#n_mr1","title":"N_MR1","text":"<p>The version code for Android Nougat MR1</p> <pre><code>println(versionCode.N_MR1) // 25\n</code></pre>"},{"location":"android/os_info/#o","title":"O","text":"<p>The version code for Android Oreo</p> <pre><code>println(versionCode.O) // 26\n</code></pre>"},{"location":"android/os_info/#o_mr1","title":"O_MR1","text":"<p>The version code for Android Oreo MR1</p> <pre><code>println(versionCode.O_MR1) // 27\n</code></pre>"},{"location":"android/os_info/#p","title":"P","text":"<p>The version code for Android Pie</p> <pre><code>println(versionCode.P) // 28\n</code></pre>"},{"location":"android/os_info/#q","title":"Q","text":"<p>The version code for Android 10</p> <pre><code>println(versionCode.Q) // 29\n</code></pre>"},{"location":"android/os_info/#r","title":"R","text":"<p>The version code for Android 11</p> <pre><code>println(versionCode.R) // 30\n</code></pre>"},{"location":"android/os_info/#s","title":"S","text":"<p>The version code for Android 12</p> <pre><code>println(versionCode.S) // 32\n</code></pre>"},{"location":"android/os_info/#s_v2","title":"S_V2","text":"<p>The version code for Android 12</p> <pre><code>println(versionCode.S_V2) // 32\n</code></pre>"},{"location":"android/os_info/#tiramisu","title":"TIRAMISU","text":"<p>The version code for Android 13</p> <pre><code>println(versionCode.TIRAMISU) // 33\n</code></pre>"},{"location":"android/os_info/#upside_down_cake","title":"UPSIDE_DOWN_CAKE","text":"<p>The version code for Android 14</p> <pre><code>println(versionCode.UPSIDE_DOWN_CAKE) // 34\n</code></pre>"},{"location":"android/os_info/#androidid","title":"androidId","text":"<p>Unique Android ID of the device</p>"},{"location":"android/os_info/#original-source_2","title":"Original source","text":"<p>The value of the Android ID is retrieved from <code>Settings.Secure.ANDROID_ID</code> property</p>"},{"location":"android/os_info/#kinfos-source_2","title":"KInfo's source","text":"<pre><code>val androidId: String = androidInfo.androidId\n\nprintln(androidId) // e.g. 016a501869178b55\n</code></pre>"},{"location":"android/os_info/#androidcodename","title":"androidCodename","text":"<p>Android codename of the device, similar to codename property, but is more human-readable</p>"},{"location":"android/os_info/#kinfos-source_3","title":"KInfo's source","text":"<pre><code>val androidCodename: String = androidInfo.androidCodename\n\nprintln(androidCodename) // e.g. Upside down cake \n</code></pre>"},{"location":"android/system_features/","title":"System features","text":"<p>Information refer to hardware or software features of an Android device</p>"},{"location":"android/system_features/#systemfeaturelist","title":"systemFeatureList","text":"<p>List of system features available on the device</p>"},{"location":"android/system_features/#original-source","title":"Original source","text":"<p>The feature list is retrieved from <code>PackageManager.systemAvailableFeatures</code> property</p>"},{"location":"android/system_features/#kinfos-source","title":"KInfo's source","text":"<pre><code>val systemFeatureList: List&lt;String&gt; = androidInfo.systemFeatureList\n\nprintln(systemFeatureList) // e.g.  [android.hardware.sensor.proximity, etc...]\n</code></pre>"},{"location":"android/tags/","title":"Tags","text":"<p>Additional information describe the current build</p>"},{"location":"android/tags/#tags","title":"tags","text":"<p>Comma-separated tags associated with the build</p>"},{"location":"android/tags/#original-source","title":"Original source","text":"<p>The tags string is retrieved from <code>Build.TAGS</code> property</p>"},{"location":"android/tags/#kinfos-source","title":"KInfo's source","text":"<pre><code>val tags: String = androidInfo.tags\n\nprintln(board) // e.g. release-keys\n</code></pre>"},{"location":"android/tags/#isphysicaldevice","title":"isPhysicalDevice","text":"<p>Indicates if the device is physical or an emulator</p>"},{"location":"android/tags/#kinfos-source_1","title":"KInfo's source","text":"<pre><code>val isPhysicalDevice: Boolean = androidInfo.isPhysicalDevice\n\nprintln(isPhysicalDevice) // true or false\n</code></pre>"},{"location":"desktop/","title":"Overview","text":"<p>The desktop platform works under the hood with the oshi library to retrieve the information</p>"},{"location":"desktop/#available-information","title":"Available information","text":"<p>On desktop target are available the below information:</p>"},{"location":"desktop/#hardware","title":"Hardware","text":"Category Property Description Source Computer System <code>computerSystem</code> The details of the computer system <code>Hardware.computerSystem</code> CPU <code>centralProcessor</code> The details of the system's central processor (CPU) <code>Hardware.centralProcessor</code> Memory <code>globalMemory</code> The details about the system's global memory <code>Hardware.globalMemory</code> Power Sources <code>powerSources</code> A list of power sources available to the system <code>Hardware.powerSources</code> Disk Storage <code>diskStores</code> A list of disk storage devices <code>Hardware.diskStores</code> Logical Volumes <code>logicalVolumeGroups</code> A list of logical volume groups configured on the system <code>Hardware.logicalVolumeGroups</code> Network Interfaces <code>networkIFs</code> A list of network interfaces on the system <code>Hardware.networkIFs</code> Displays <code>displays</code> A list of display devices connected to the system <code>Hardware.displays</code> Sensors <code>sensors</code> The details of system sensors <code>Hardware.sensors</code> Sound Cards <code>soundCards</code> A list of sound cards available on the system <code>Hardware.soundCards</code> Graphics Cards <code>graphicsCards</code> A list of graphics cards available on the system <code>Hardware.graphicsCards</code>"},{"location":"desktop/#operating-system","title":"Operating System","text":"Category Property Description Source App Info <code>name</code> The name of the application <code>OperatingSystem.queryInstalledApps</code> <code>version</code> The version of the application <code>vendor</code> The vendor or publisher of the application <code>timestamp</code> The installation or last modified timestamp of the application in milliseconds since epoch <code>additionalInfo</code> A map containing additional application details OS Info <code>family</code> The family or type of the operating system <code>OperatingSystem.family</code> <code>manufacturer</code> The manufacturer of the operating system <code>OperatingSystem.manufacturer</code> <code>versionInfo</code> The version information of the operating system <code>OperatingSystem.versionInfo</code> System Info <code>bitness</code> The bitness of the operating system <code>OperatingSystem.bitness</code> <code>systemUptime</code> The system uptime in milliseconds since the operating system started <code>OperatingSystem.systemUptime</code> <code>systemBootTime</code> The time in milliseconds when the system was last booted (Unix timestamp) <code>OperatingSystem.systemBootTime</code> <code>isElevated</code> A flag indicating whether the operating system is running with elevated privileges <code>OperatingSystem.isElevated</code> File System Info <code>fileSystem</code> The file system information of the operating system <code>OperatingSystem.fileSystem</code> Process Info <code>processId</code> The process ID of the currently running operating system process <code>OperatingSystem.processId</code> <code>currentProcess</code> The currently running process of the operating system <code>OperatingSystem.currentProcess</code> <code>processCount</code> The total number of processes running on the operating system <code>OperatingSystem.processCount</code> Thread Info <code>threadId</code> The thread ID of the currently running thread <code>OperatingSystem.threadId</code> <code>currentThread</code> The currently running thread of the operating system <code>OperatingSystem.currentThread</code> <code>threadCount</code> The total number of threads running on the operating system <code>OperatingSystem.threadCount</code> Network Info <code>internetProtocolStats</code> The internet protocol statistics related to network connections <code>OperatingSystem.internetProtocolStats</code> Network Params <code>networkParams</code> The network parameters of the operating system <code>OperatingSystem.networkParams</code> Service Info <code>services</code> The list of services running on the operating system <code>OperatingSystem.services</code> Session Info <code>sessions</code> The list of user sessions currently active on the operating system <code>OperatingSystem.sessions</code>"},{"location":"desktop/#api-source","title":"API source","text":"<p>The information are retrievable using the <code>DesktopInfo</code> API:</p>"},{"location":"desktop/#composable-context","title":"Composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside composable context</p> <pre><code>val kInfoState = rememberKInfoState()\n</code></pre>"},{"location":"desktop/#non-composable-context","title":"Non-composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside non-composable context</p> <pre><code>val kInfoState = KInfoState()\n</code></pre>"},{"location":"desktop/#desktopinfo","title":"DesktopInfo","text":"<p>Retrieve a <code>DesktopInfo</code> instance from <code>kInfoState</code> instance</p> <pre><code>val desktopInfo = kInfoState.desktopInfo \n</code></pre> <p>Warning</p> <p>You can directly retrieve <code>desktopInfo</code> just inside the <code>desktopMain</code> module, in the <code>commonMain</code> module you have to use the common usage instead, or the application will crash</p>"},{"location":"desktop/#oem-mechanism","title":"O.E.M Mechanism","text":"<p>When a property is To Be Filled By O.E.M you can use the below mechanism to use other value instead that is not  filled:</p> <pre><code>val computerSystem = desktopInfo.hardware.computerSystem\n\nval model = computerSystem.model.whenIsToBeFilledByOEM(\n    useInstead = {\n        your custom logic\n    }\n)\n</code></pre> <p>You can just check also if a property is marked as To Be Filled By O.E.M with the below method:</p> <pre><code>val computerSystem = desktopInfo.hardware.computerSystem\n\nval isModelToBeFilledByOEM = computerSystem.model.isToBeFilledByOEM()\n\nif(isModelToBeFilledByOEM) {\n    your custom logic\n} else {\n    your custom logic\n}\n</code></pre>"},{"location":"desktop/hardware/","title":"Hardware","text":"<p>The information refer to the available hardware of the device</p>"},{"location":"desktop/hardware/#available-information","title":"Available information","text":"<p>On desktop target the available hardware information are the below:</p> Category Property Description Source Computer System <code>computerSystem</code> The details of the computer system <code>Hardware.computerSystem</code> CPU <code>centralProcessor</code> The details of the system's central processor (CPU) <code>Hardware.centralProcessor</code> Memory <code>globalMemory</code> The details about the system's global memory <code>Hardware.globalMemory</code> Power Sources <code>powerSources</code> A list of power sources available to the system <code>Hardware.powerSources</code> Disk Storage <code>diskStores</code> A list of disk storage devices <code>Hardware.diskStores</code> Logical Volumes <code>logicalVolumeGroups</code> A list of logical volume groups configured on the system <code>Hardware.logicalVolumeGroups</code> Network Interfaces <code>networkIFs</code> A list of network interfaces on the system <code>Hardware.networkIFs</code> Displays <code>displays</code> A list of display devices connected to the system <code>Hardware.displays</code> Sensors <code>sensors</code> The details of system sensors <code>Hardware.sensors</code> Sound Cards <code>soundCards</code> A list of sound cards available on the system <code>Hardware.soundCards</code> Graphics Cards <code>graphicsCards</code> A list of graphics cards available on the system <code>Hardware.graphicsCards</code>"},{"location":"desktop/hardware/#api-source","title":"API source","text":"<p>The information are retrievable using the <code>DesktopInfo.Hardware</code> API:</p>"},{"location":"desktop/hardware/#hardware-api","title":"Hardware API","text":"<p>Retrieve a <code>Hardware</code> instance from <code>desktopInfo</code> instance</p> <pre><code>val hardware = desktopInfo.hardware\n</code></pre>"},{"location":"desktop/hardware/#properties","title":"Properties","text":"<p>The below properties are miscellaneous readable properties provided by the hardware instance </p>"},{"location":"desktop/hardware/#powersources","title":"powerSources","text":"<p>List of power sources available in the system</p> <pre><code>val powerSources: List&lt;PowerSource&gt; = hardware.powerSources\n\nprintln(powerSources)\n</code></pre>"},{"location":"desktop/hardware/#diskstores","title":"diskStores","text":"<p>List of storage devices available in the system</p> <pre><code>val diskStores: List&lt;HWDiskStore&gt; = hardware.diskStores\n\nprintln(diskStores)\n</code></pre>"},{"location":"desktop/hardware/#logicalvolumegroups","title":"logicalVolumeGroups","text":"<p>List of logical volume groups on the system</p> <pre><code>val logicalVolumeGroups: List&lt;LogicalVolumeGroup&gt; = hardware.logicalVolumeGroups\n\nprintln(logicalVolumeGroups)\n</code></pre>"},{"location":"desktop/hardware/#networkifs","title":"networkIFs","text":"<p>List of network interfaces available on the system</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\n\nprintln(networkIFs)\n</code></pre>"},{"location":"desktop/hardware/#displays","title":"displays","text":"<p>List of displays connected to the system</p> <pre><code>val displays: List&lt;Display&gt; = hardware.displays\n\nprintln(displays)\n</code></pre>"},{"location":"desktop/hardware/#soundcards","title":"soundCards","text":"<p>List of sound cards available on the system</p> <pre><code>val soundCards: List&lt;SoundCard&gt; = hardware.soundCards\n\nprintln(soundCards)\n</code></pre>"},{"location":"desktop/hardware/#graphicscards","title":"graphicsCards","text":"<p>List of graphic cards available on the system</p> <pre><code>val graphicsCards: List&lt;GraphicsCard&gt; = hardware.graphicsCards\n\nprintln(graphicsCards)\n</code></pre>"},{"location":"desktop/hardware/#methods","title":"Methods","text":"<p>The below methods are provided by hardware instance, and are useful to interact with the device to  retrieve any available information</p>"},{"location":"desktop/hardware/#getnetworkifs","title":"getNetworkIfs","text":"<p>Returns the list of network interfaces on the system</p>"},{"location":"desktop/hardware/#parameters","title":"Parameters","text":"<ul> <li>includeLocalInterfaces <code>:Boolean</code> - Whether to include local interfaces (such as loopback)</li> </ul> <pre><code>val networkIfs: List&lt;NetworkIF&gt; = hardware.getNetworkIfs(\n    includeLocalInterfaces = // true or false\n)\n\nprintln(networkIfs)\n</code></pre>"},{"location":"desktop/hardware/#getusbdevices","title":"getUsbDevices","text":"<p>Retrieves the USB devices connected to the system, with the option to represent them as a device tree</p>"},{"location":"desktop/hardware/#parameters_1","title":"Parameters","text":"<ul> <li>tree <code>:Boolean</code> - Whether to return a tree structure of connected devices</li> </ul>"},{"location":"desktop/hardware/#interfaces","title":"Interfaces","text":"<ul> <li>UsbDevice - Represents a USB device</li> </ul> <pre><code>val usbDevices: List&lt;UsbDevice&gt; = hardware.getUsbDevices(\n    tree = // true or false\n)\n\nprintln(usbDevices)\n</code></pre>"},{"location":"desktop/hardware/display/","title":"Display","text":"<p>Represents a display device, such as a monitor or screen, providing details about the  Extended Display Identification Data (EDID) for the display. EDID contains information about the display's capabilities and characteristics</p>"},{"location":"desktop/hardware/display/#properties","title":"Properties","text":""},{"location":"desktop/hardware/display/#edid","title":"edid","text":"<p>The Extended Display Identification Data (EDID) for the display. It is a byte array that stores the capabilities and characteristics of the display device</p> <pre><code>val displays = hardware.displays\nval sample: Display = displays.first()\n\nval edid: ByteArray = sample.edid\n\nprintln(edid)\n// e.g. [00, FF, FF, FF, FF, FF, FF, 00, 12, 34, 56, 78, 9A, BC, DE, F0, 01, 01, 01, 01, 01, 01, 01, 01]\n</code></pre>"},{"location":"desktop/hardware/graphic_card/","title":"Graphic card","text":"<p>Represents a graphics card in the system, providing details about the graphics card, including its name, device ID, vendor,  version information, and VRAM size</p>"},{"location":"desktop/hardware/graphic_card/#properties","title":"Properties","text":""},{"location":"desktop/hardware/graphic_card/#name","title":"name","text":"<p>The name of the graphics card</p> <pre><code>val graphicsCards = hardware.graphicsCards\nval sample: GraphicsCard = graphicsCards.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. NVIDIA GeForce RTX 3080\n</code></pre>"},{"location":"desktop/hardware/graphic_card/#deviceid","title":"deviceId","text":"<p>The unique device identifier for the graphics card, this ID is typically used to distinguish the card within the system</p> <pre><code>val graphicsCards = hardware.graphicsCards\nval sample: GraphicsCard = graphicsCards.first()\n\nval deviceId: String = sample.deviceId\n\nprintln(deviceId) // e.g. 1234-5678-9ABCDEF0\n</code></pre>"},{"location":"desktop/hardware/graphic_card/#vendor","title":"vendor","text":"<p>The vendor of the graphics card</p> <pre><code>val graphicsCards = hardware.graphicsCards\nval sample: GraphicsCard = graphicsCards.first()\n\nval vendor: String = sample.vendor\n\nprintln(vendor) // e.g. NVIDIA\n</code></pre>"},{"location":"desktop/hardware/graphic_card/#versioninfo","title":"versionInfo","text":"<p>The version information of the graphics card</p> <pre><code>val graphicsCards = hardware.graphicsCards\nval sample: GraphicsCard = graphicsCards.first()\n\nval versionInfo: String = sample.versionInfo\n\nprintln(versionInfo) // e.g. Driver 531.68 / Rev A1\n</code></pre>"},{"location":"desktop/hardware/graphic_card/#vram","title":"vRam","text":"<p>The amount of VRAM (video memory) available on the graphics card, in bytes</p> <pre><code>val graphicsCards = hardware.graphicsCards\nval sample: GraphicsCard = graphicsCards.first()\n\nval vRam: Long = sample.vRam\n\nprintln(vRam) // e.g. 10737418240        \n</code></pre>"},{"location":"desktop/hardware/logical_volume_group/","title":"Logical Volume Groups","text":"<p>Represents a logical volume group in a storage system, providing details about the name of the volume group, the physical volumes associated with it, and the logical volumes mapped to physical volumes</p>"},{"location":"desktop/hardware/logical_volume_group/#properties","title":"Properties","text":""},{"location":"desktop/hardware/logical_volume_group/#name","title":"name","text":"<p>The name of the logical volume group</p> <pre><code>val logicalVolumeGroups = hardware.logicalVolumeGroups\nval sample: LogicalVolumeGroup = logicalVolumeGroups.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. root\n</code></pre>"},{"location":"desktop/hardware/logical_volume_group/#physicalvolumes","title":"physicalVolumes","text":"<p>A set of physical volumes that are part of the logical volume group</p> <pre><code>val logicalVolumeGroups = hardware.logicalVolumeGroups\nval sample: LogicalVolumeGroup = logicalVolumeGroups.first()\n\nval physicalVolumes: Set&lt;String&gt; = sample.physicalVolumes\n\nprintln(physicalVolumes) // e.g. [\"/dev/sda1\"]\n</code></pre>"},{"location":"desktop/hardware/logical_volume_group/#logicalvolumes","title":"logicalVolumes","text":"<p>A map where the key is the logical volume name and the value is a set of physical volume names that are part of the  logical volume</p> <pre><code>val logicalVolumeGroups = hardware.logicalVolumeGroups\nval sample: LogicalVolumeGroup = logicalVolumeGroups.first()\n\nval logicalVolumes: Map&lt;String, Set&lt;String&gt;&gt; = sample.logicalVolumes\n\nprintln(logicalVolumes) // e.g. [[root, /dev/sda1]]\n</code></pre>"},{"location":"desktop/hardware/network_interface/","title":"Network interface","text":"<p>Represents a network interface on the system</p>"},{"location":"desktop/hardware/network_interface/#properties","title":"Properties","text":""},{"location":"desktop/hardware/network_interface/#name","title":"name","text":"<p>The name of the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. eth0\n</code></pre>"},{"location":"desktop/hardware/network_interface/#index","title":"index","text":"<p>The index of the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval index: Int = sample.index\n\nprintln(index) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/network_interface/#displayname","title":"displayName","text":"<p>The display name of the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval displayName: String = sample.displayName\n\nprintln(displayName) // e.g. Intel(R) Ethernet Connection I219-V\n</code></pre>"},{"location":"desktop/hardware/network_interface/#ifalias","title":"ifAlias","text":"<p>The alias of the network interface, if available</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval ifAlias: String = sample.ifAlias\n\nprintln(ifAlias) // e.g. LAN\n</code></pre>"},{"location":"desktop/hardware/network_interface/#ifoperstatus","title":"ifOperStatus","text":"<p>The operational status of the network interface</p>"},{"location":"desktop/hardware/network_interface/#ifoperstatus_1","title":"IfOperStatus","text":"Status Description UP Up and operational. Ready to pass packets DOWN Down and not operational. Not ready to pass packets TESTING In some test mode UNKNOWN The interface status is unknown DORMANT The interface is not up, but is in a pending state, waiting for some external event NOT_PRESENT Some component is missing LOWER_LAYER_DOWN Down due to state of lower-layer interface(s) <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval ifOperStatus: IfOperStatus = sample.ifOperStatus\n\nprintln(ifOperStatus) // e.g. LAN\n</code></pre>"},{"location":"desktop/hardware/network_interface/#mtu","title":"mtu","text":"<p>The maximum transmission unit (MTU) size of the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval mtu: Long = sample.mtu\n\nprintln(mtu) // e.g. 1500\n</code></pre>"},{"location":"desktop/hardware/network_interface/#macaddr","title":"macaddr","text":"<p>The MAC address of the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval macaddr: String = sample.macaddr\n\nprintln(macaddr) // e.g. 00:1A:2B:3C:4D:5E\n</code></pre>"},{"location":"desktop/hardware/network_interface/#ipv4addr","title":"ipv4addr","text":"<p>The list of IPv4 addresses assigned to the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval ipv4addr: Array&lt;String&gt; = sample.ipv4addr\n\nprintln(ipv4addr) // e.g. [\"192.168.1.10\"]\n</code></pre>"},{"location":"desktop/hardware/network_interface/#subnetmasks","title":"subnetMasks","text":"<p>The list of subnet masks for the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval subnetMasks: Array&lt;Short&gt; = sample.subnetMasks\n\nprintln(subnetMasks) // e.g. [24]\n</code></pre>"},{"location":"desktop/hardware/network_interface/#ipv6addr","title":"ipv6addr","text":"<p>The list of IPv6 addresses assigned to the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval ipv6addr: Array&lt;String&gt; = sample.ipv6addr\n\nprintln(ipv6addr) // e.g. [\"fe80::21a:2bff:fe3c:4d5e\"]\n</code></pre>"},{"location":"desktop/hardware/network_interface/#prefixlengths","title":"prefixLengths","text":"<p>The list of prefix lengths corresponding to the IPv6 addresses</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval prefixLengths: Array&lt;Short&gt; = sample.prefixLengths\n\nprintln(prefixLengths) // e.g. [64]\n</code></pre>"},{"location":"desktop/hardware/network_interface/#iftype","title":"ifType","text":"<p>The type of the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval ifType: Int = sample.ifType\n\nprintln(ifType) // e.g. 6 \n</code></pre>"},{"location":"desktop/hardware/network_interface/#ndisphysicalmediumtype","title":"ndisPhysicalMediumType","text":"<p>The NDIS physical medium type for the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval ndisPhysicalMediumType: Int = sample.ndisPhysicalMediumType\n\nprintln(ndisPhysicalMediumType) // e.g. 0 \n</code></pre>"},{"location":"desktop/hardware/network_interface/#isconnectorpresent","title":"isConnectorPresent","text":"<p>Whether a connector is present on the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval isConnectorPresent: Boolean = sample.isConnectorPresent\n\nprintln(isConnectorPresent) // true or false\n</code></pre>"},{"location":"desktop/hardware/network_interface/#bytesrecv","title":"bytesRecv","text":"<p>The total number of bytes received by the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval bytesRecv: Long = sample.bytesRecv\n\nprintln(bytesRecv) // e.g. 8123456789\n</code></pre>"},{"location":"desktop/hardware/network_interface/#bytessent","title":"bytesSent","text":"<p>The total number of bytes sent by the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval bytesSent: Long = sample.bytesSent\n\nprintln(bytesSent) // e.g. 3456789012\n</code></pre>"},{"location":"desktop/hardware/network_interface/#packetsrecv","title":"packetsRecv","text":"<p>The total number of packets received by the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval packetsRecv: Long = sample.packetsRecv\n\nprintln(packetsRecv) // e.g. 12345678\n</code></pre>"},{"location":"desktop/hardware/network_interface/#packetssent","title":"packetsSent","text":"<p>The total number of packets sent by the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval packetsSent: Long = sample.packetsSent\n\nprintln(packetsSent) // e.g. 9876543\n</code></pre>"},{"location":"desktop/hardware/network_interface/#inerrors","title":"inErrors","text":"<p>The total number of input errors on the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval inErrors: Long = sample.inErrors\n\nprintln(inErrors) // e.g. 2\n</code></pre>"},{"location":"desktop/hardware/network_interface/#outerrors","title":"outErrors","text":"<p>The total number of output errors on the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval outErrors: Long = sample.outErrors\n\nprintln(outErrors) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/network_interface/#indrops","title":"inDrops","text":"<p>The total number of input packets dropped by the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval inDrops: Long = sample.inDrops\n\nprintln(inDrops) // e.g. 15\n</code></pre>"},{"location":"desktop/hardware/network_interface/#collisions","title":"collisions","text":"<p>The total number of collisions on the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval collisions: Long = sample.collisions\n\nprintln(collisions) // e.g. 15\n</code></pre>"},{"location":"desktop/hardware/network_interface/#speed","title":"speed","text":"<p>The speed of the network interface in bits per second</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval speed: Long = sample.speed\n\nprintln(speed) // e.g. 1000000000\n</code></pre>"},{"location":"desktop/hardware/network_interface/#timestamp","title":"timestamp","text":"<p>The timestamp of the last update for the network interface</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval timestamp: Long = sample.timestamp\n\nprintln(timestamp) // e.g. 1760561106000\n</code></pre>"},{"location":"desktop/hardware/network_interface/#isknownvmmacaddr","title":"isKnownVmMacAddr","text":"<p>Whether the MAC address is known to belong to a virtual machine</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval isKnownVmMacAddr: Boolean = sample.isKnownVmMacAddr\n\nprintln(isKnownVmMacAddr) // true or false\n</code></pre>"},{"location":"desktop/hardware/network_interface/#updateattributes","title":"updateAttributes","text":"<p>Whether the network interface attributes should be updated</p> <pre><code>val networkIFs: List&lt;NetworkIF&gt; = hardware.networkIFs\nval sample: NetworkIF = networkIFs.first()\n\nval updateAttributes: Boolean = sample.updateAttributes\n\nprintln(updateAttributes) // true or false\n</code></pre>"},{"location":"desktop/hardware/power_source/","title":"Power source","text":"<p>Represents a power source (e.g., a battery) in the system, providing details like the remaining capacity, power usage,  voltage, and charging status</p>"},{"location":"desktop/hardware/power_source/#properties","title":"Properties","text":""},{"location":"desktop/hardware/power_source/#name","title":"name","text":"<p>The name of the power source</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. Battery 1\n</code></pre>"},{"location":"desktop/hardware/power_source/#devicename","title":"deviceName","text":"<p>The name of the device associated with the power source</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval deviceName: String = sample.deviceName\n\nprintln(deviceName) // e.g. InternalBattery-0\n</code></pre>"},{"location":"desktop/hardware/power_source/#remainingcapacitypercent","title":"remainingCapacityPercent","text":"<p>The remaining capacity of the power source as a percentage of the total capacity</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval remainingCapacityPercent: Double = sample.remainingCapacityPercent\n\nprintln(remainingCapacityPercent) // e.g. 22.2\n</code></pre>"},{"location":"desktop/hardware/power_source/#timeremainingestimated","title":"timeRemainingEstimated","text":"<p>The estimated time remaining on the power source (in hours)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval timeRemainingEstimated: Double = sample.timeRemainingEstimated\n\nprintln(timeRemainingEstimated) // e.g. 1\n</code></pre>"},{"location":"desktop/hardware/power_source/#timeremaininginstant","title":"timeRemainingInstant","text":"<p>The instantaneous time remaining on the power source (in hours)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval timeRemainingInstant: Double = sample.timeRemainingInstant\n\nprintln(timeRemainingInstant) // e.g. 1760539506000\n</code></pre>"},{"location":"desktop/hardware/power_source/#powerusagerate","title":"powerUsageRate","text":"<p>The rate of power usage by the power source (in watts)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval powerUsageRate: Double = sample.powerUsageRate\n\nprintln(powerUsageRate) // e.g. 15.5\n</code></pre>"},{"location":"desktop/hardware/power_source/#voltage","title":"voltage","text":"<p>The voltage of the power source (in volts)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval voltage: Double = sample.voltage\n\nprintln(voltage) // e.g. 11.1\n</code></pre>"},{"location":"desktop/hardware/power_source/#amperage","title":"amperage","text":"<p>The amperage of the power source (in amperes)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval amperage: Double = sample.amperage\n\nprintln(amperage) // e.g. 1.4\n</code></pre>"},{"location":"desktop/hardware/power_source/#ispoweronline","title":"isPowerOnLine","text":"<p>Whether the power source is connected to an external power line</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval isPowerOnLine: Boolean = sample.isPowerOnLine\n\nprintln(isPowerOnLine) // true or false\n</code></pre>"},{"location":"desktop/hardware/power_source/#ischarging","title":"isCharging","text":"<p>Whether the power source is currently charging</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval isCharging: Boolean = sample.isCharging\n\nprintln(isCharging) // true or false\n</code></pre>"},{"location":"desktop/hardware/power_source/#isdischarging","title":"isDischarging","text":"<p>Whether the power source is currently discharging</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval isDischarging: Boolean = sample.isDischarging\n\nprintln(isDischarging) // true or false\n</code></pre>"},{"location":"desktop/hardware/power_source/#capacityunits","title":"capacityUnits","text":"<p>The units for capacity</p>"},{"location":"desktop/hardware/power_source/#capacityunits_1","title":"CapacityUnits","text":"Unit Description MWH MilliWattHours MAH Should be multiplied by voltage to convert to mWh RELATIVE Relative units. The specific units are not defined. The ratio of current/max capacity still represents state of charge and the ratio of max/design capacity still represents state of health <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval capacityUnits: CapacityUnits = sample.capacityUnits\n\nprintln(capacityUnits) // [`MWH`, `MAH`, `RELATIVE`]\n</code></pre>"},{"location":"desktop/hardware/power_source/#currentcapacity","title":"currentCapacity","text":"<p>The current capacity of the power source (in mAh or Ah, depending on capacityUnits)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval currentCapacity: Int = sample.currentCapacity\n\nprintln(currentCapacity) // e.g. 1\n</code></pre>"},{"location":"desktop/hardware/power_source/#maxcapacity","title":"maxCapacity","text":"<p>The maximum capacity of the power source (in mAh or Ah, depending on capacityUnits)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval maxCapacity: Int = sample.maxCapacity\n\nprintln(maxCapacity) // e.g. 1\n</code></pre>"},{"location":"desktop/hardware/power_source/#designcapacity","title":"designCapacity","text":"<p>The designed capacity of the power source (in mAh or Ah, depending on capacityUnits)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval designCapacity: Int = sample.designCapacity\n\nprintln(designCapacity) // e.g. 1\n</code></pre>"},{"location":"desktop/hardware/power_source/#cyclecount","title":"cycleCount","text":"<p>The number of charge cycles the power source has gone through</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval cycleCount: Int = sample.cycleCount\n\nprintln(cycleCount) // e.g. 100\n</code></pre>"},{"location":"desktop/hardware/power_source/#chemistry","title":"chemistry","text":"<p>The chemistry used in the power source</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval chemistry: String = sample.chemistry\n\nprintln(chemistry) // e.g. Li-ion\n</code></pre>"},{"location":"desktop/hardware/power_source/#manufacturer","title":"manufacturer","text":"<p>The manufacturer of the power source</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval manufacturer: String = sample.manufacturer\n\nprintln(manufacturer) // e.g. BatteryCo\n</code></pre>"},{"location":"desktop/hardware/power_source/#serialnumber","title":"serialNumber","text":"<p>The serial number of the power source</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval serialNumber: String = sample.serialNumber\n\nprintln(serialNumber) // e.g. SN123456789\n</code></pre>"},{"location":"desktop/hardware/power_source/#temperature","title":"temperature","text":"<p>The temperature of the power source (in Celsius)</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval temperature: Double = sample.temperature\n\nprintln(temperature) // e.g. 35.5\n</code></pre>"},{"location":"desktop/hardware/power_source/#updateattributes","title":"updateAttributes","text":"<p>Whether the attributes of the power source should be updated</p> <pre><code>val powerSources = hardware.powerSources\nval sample: PowerSource = powerSources.first()\n\nval updateAttributes: Boolean = sample.updateAttributes\n\nprintln(updateAttributes) // e.g. 35.5\n</code></pre>"},{"location":"desktop/hardware/sound_card/","title":"Sound card","text":"<p>Represents a sound card in the system, providing details about the sound card's driver version, name, and codec type.</p>"},{"location":"desktop/hardware/sound_card/#properties","title":"Properties","text":""},{"location":"desktop/hardware/sound_card/#driverversion","title":"driverVersion","text":"<p>The version of the driver for the sound card</p> <pre><code>val soundCards = hardware.soundCards\nval sample: SoundCard = soundCards.first()\n\nval driverVersion: String = sample.driverVersion\n\nprintln(driverVersion) // e.g. 6.0.1.8541\n</code></pre>"},{"location":"desktop/hardware/sound_card/#name","title":"name","text":"<p>The name of the sound card</p> <pre><code>val soundCards = hardware.soundCards\nval sample: SoundCard = soundCards.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. Realtek High Definition Audio\n</code></pre>"},{"location":"desktop/hardware/sound_card/#codec","title":"codec","text":"<p>The codec used by the sound card</p> <pre><code>val soundCards = hardware.soundCards\nval sample: SoundCard = soundCards.first()\n\nval codec: String = sample.codec\n\nprintln(codec) // e.g. Realtek ALC1220\n</code></pre>"},{"location":"desktop/hardware/usb_device/","title":"USB device","text":"<p>Represents a USB device, providing details about the USB device, including its name, vendor, product information,  serial number, and connected devices</p>"},{"location":"desktop/hardware/usb_device/#properties","title":"Properties","text":""},{"location":"desktop/hardware/usb_device/#name","title":"name","text":"<p>The name of the USB device</p> <pre><code>val usbDevices = hardware.getUsbDevices(\n    tree = // true or false\n)\nval sample: UsbDevice = usbDevices.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. USB 3.0 Hub\n</code></pre>"},{"location":"desktop/hardware/usb_device/#vendor","title":"vendor","text":"<p>The vendor of the USB device</p> <pre><code>val usbDevices = hardware.getUsbDevices(\n    tree = // true or false\n)\nval sample: UsbDevice = usbDevices.first()\n\nval vendor: String = sample.vendor\n\nprintln(vendor) // e.g. Logitech\n</code></pre>"},{"location":"desktop/hardware/usb_device/#vendorid","title":"vendorId","text":"<p>The vendor ID of the USB device, typically a 4-character hexadecimal value</p> <pre><code>val usbDevices = hardware.getUsbDevices(\n    tree = // true or false\n)\nval sample: UsbDevice = usbDevices.first()\n\nval vendorId: String = sample.vendorId\n\nprintln(vendorId) // e.g. 046D\n</code></pre>"},{"location":"desktop/hardware/usb_device/#productid","title":"productId","text":"<p>The product ID of the USB device, typically a 4-character hexadecimal value</p> <pre><code>val usbDevices = hardware.getUsbDevices(\n    tree = // true or false\n)\nval sample: UsbDevice = usbDevices.first()\n\nval productId: String = sample.productId\n\nprintln(productId) // e.g. 1A2B\n</code></pre>"},{"location":"desktop/hardware/usb_device/#serialnumber","title":"serialNumber","text":"<p>The serial number of the USB device</p> <pre><code>val usbDevices = hardware.getUsbDevices(\n    tree = // true or false\n)\nval sample: UsbDevice = usbDevices.first()\n\nval serialNumber: String = sample.serialNumber\n\nprintln(serialNumber) // e.g. SN1234567890\n</code></pre>"},{"location":"desktop/hardware/usb_device/#uniquedeviceid","title":"uniqueDeviceId","text":"<p>A unique identifier for the USB device</p> <pre><code>val usbDevices = hardware.getUsbDevices(\n    tree = // true or false\n)\nval sample: UsbDevice = usbDevices.first()\n\nval uniqueDeviceId: String = sample.uniqueDeviceId\n\nprintln(uniqueDeviceId) // e.g. USB\\\\VID_046D&amp;PID_1A2B\\\\SN1234567890\n</code></pre>"},{"location":"desktop/hardware/usb_device/#connecteddevices","title":"connectedDevices","text":"<p>A list of other USB devices that are connected to this device (if any)</p> <pre><code>val usbDevices = hardware.getUsbDevices(\n    tree = // true or false\n)\nval sample: UsbDevice = usbDevices.first()\n\nval connectedDevices: List&lt;UsbDevice&gt; = sample.connectedDevices\n\nprintln(connectedDevices) // e.g. []\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/","title":"Central processor","text":"<p>The information refer to the system's central processor (CPU)</p>"},{"location":"desktop/hardware/centralprocessor/central_processor/#original-source","title":"Original source","text":"<p>The central processor information are retrieved from <code>Hardware.CentralProcessor</code> interface</p>"},{"location":"desktop/hardware/centralprocessor/central_processor/#kinfos-source","title":"KInfo's source","text":"<pre><code>val centralProcessor = hardware.centralProcessor\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#properties","title":"Properties","text":""},{"location":"desktop/hardware/centralprocessor/central_processor/#maxfreq","title":"maxFreq","text":"<p>The maximum frequency of the processor in hertz</p> <pre><code>val maxFreq: Long = centralProcessor.maxFreq\n\nprintln(maxFreq) // e.g. 3793000000\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#currentfreq","title":"currentFreq","text":"<p>Array of current frequencies for each logical processor in hertz</p> <pre><code>val currentFreq: LongArray = centralProcessor.currentFreq\n\nprintln(currentFreq) // e.g. [3793000000, 3793000000, 3793000000, etc ...]\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#logicalprocessors","title":"logicalProcessors","text":"<p>List of logical processor, each representing a core or a thread</p> <pre><code>val logicalProcessors: List&lt;LogicalProcessor&gt; = centralProcessor.logicalProcessors\n\nprintln(logicalProcessors)\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#physicalprocessors","title":"physicalProcessors","text":"<p>List of physical processor, representing the physical cores in the system</p> <pre><code>val physicalProcessors: List&lt;PhysicalProcessor&gt; = centralProcessor.physicalProcessors\n\nprintln(physicalProcessors)\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#processorcaches","title":"processorCaches","text":"<p>List of processor caches, detailing cache levels, sizes, and types</p> <pre><code>val processorCaches: List&lt;ProcessorCache&gt; = centralProcessor.processorCaches\n\nprintln(processorCaches)\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#featureflags","title":"featureFlags","text":"<p>The CPU's supported features, such as instruction sets and extensions</p> <pre><code>val featureFlags: List&lt;String&gt; = centralProcessor.featureFlags\n\nprintln(featureFlags) \n// e.g. [PF_COMPARE_EXCHANGE_DOUBLE, PF_MMX_INSTRUCTIONS_AVAILABLE, etc...]\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#systemcpuloadticks","title":"systemCpuLoadTicks","text":"<p>Array of tick counters representing system-wide CPU load</p> <pre><code>val systemCpuLoadTicks: LongArray = centralProcessor.systemCpuLoadTicks\n\nprintln(systemCpuLoadTicks) // e.g. [5529211, 3861243, 143527712, 0]\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#processorcpuloadticks","title":"processorCpuLoadTicks","text":"<p>Array of tick counters for each logical processor, representing the CPU load distribution</p> <pre><code>val processorCpuLoadTicks: Array&lt;LongArray&gt; = centralProcessor.processorCpuLoadTicks\n\nprintln(processorCpuLoadTicks) // e.g. [[167359, 101640], [9273421, 0]]\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#logicalprocessorcount","title":"logicalProcessorCount","text":"<p>The number of logical processors in the system</p> <pre><code>val logicalProcessorCount: Int = centralProcessor.logicalProcessorCount\n\nprintln(logicalProcessorCount) // e.g. 8\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#physicalprocessorcount","title":"physicalProcessorCount","text":"<p>The number of physical processors (cores) in the system</p> <pre><code>val physicalProcessorCount: Int = centralProcessor.physicalProcessorCount\n\nprintln(physicalProcessorCount) // e.g. 4\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#physicalpackagecount","title":"physicalPackageCount","text":"<p>The number of physical processor packages in the system</p> <pre><code>val physicalPackageCount: Int = centralProcessor.physicalPackageCount\n\nprintln(physicalPackageCount) // e.g. 1\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#contextswitches","title":"contextSwitches","text":"<p>The total number of context switches that have occurred</p> <pre><code>val contextSwitches: Long = centralProcessor.contextSwitches\n\nprintln(contextSwitches) // e.g. 299982508\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#interrupts","title":"interrupts","text":"<p>The total number of interrupts that have occurred</p> <pre><code>val interrupts: Long = centralProcessor.interrupts\n\nprintln(interrupts) // e.g. 206562399\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#methods","title":"Methods","text":"<p>The below methods and are useful to retrieve any available information about the central processor</p>"},{"location":"desktop/hardware/centralprocessor/central_processor/#getsystemcpuloadbetweenticks","title":"getSystemCpuLoadBetweenTicks","text":"<p>Retrieves the system CPU load as a percentage between the current ticks and the specified <code>oldTickets</code></p>"},{"location":"desktop/hardware/centralprocessor/central_processor/#parameters","title":"Parameters","text":"<ul> <li>oldTickets <code>:LongArray</code> - The previous CPU ticks for comparison</li> </ul> <pre><code>val systemCpuLoadBetweenTicks: Double = centralProcessor.getSystemCpuLoadBetweenTicks(\n    oldTickets = longArrayOf(130000, 2000, 15000, 450000, 100, 0, 0, 0)\n)\n\nprintln(systemCpuLoadBetweenTicks) // e.g. 23.74 \n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#getsystemloadaverage","title":"getSystemLoadAverage","text":"<p>Retrieves the system load average for the last <code>nelem</code> intervals</p>"},{"location":"desktop/hardware/centralprocessor/central_processor/#parameters_1","title":"Parameters","text":"<ul> <li>nelem <code>:Int</code> - The number of intervals for which to retrieve the load average</li> </ul> <pre><code>val systemLoadAverage: DoubleArray = centralProcessor.getSystemLoadAverage(\n    nelem = 10\n)\n\nprintln(systemLoadAverage) // e.g. [0.75, 0.60, 0.55] \n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#getsystemcpuload","title":"getSystemCpuLoad","text":"<p>Calculates the system CPU load over a specified delay period</p>"},{"location":"desktop/hardware/centralprocessor/central_processor/#parameters_2","title":"Parameters","text":"<ul> <li>delay <code>:Long</code> - The delay period in milliseconds</li> </ul> <pre><code>val systemCpuLoad: Double = centralProcessor.getSystemCpuLoad(\n    delay = 1000\n)\n\nprintln(systemCpuLoad) // e.g. 0.42  \n</code></pre>"},{"location":"desktop/hardware/centralprocessor/central_processor/#getprocessorcpuloadbetweenticks","title":"getProcessorCpuLoadBetweenTicks","text":"<p>Retrieves the processor CPU load as a percentage between the current ticks and the specified <code>oldTickets</code></p>"},{"location":"desktop/hardware/centralprocessor/central_processor/#parameters_3","title":"Parameters","text":"<ul> <li>oldTickets <code>:Array&lt;LongArray&gt;</code> - The previous CPU ticks for comparison</li> </ul> <pre><code>val processorCpuLoadBetweenTicks: DoubleArray = centralProcessor.getProcessorCpuLoadBetweenTicks(\n    oldTickets = arrayOf(\n        longArrayOf(130000, 2000, 15000, 450000, 100, 0, 0, 0), // Core 0\n        longArrayOf(125000, 1800, 14000, 460000, 80, 0, 0, 0),  // Core 1\n        longArrayOf(120000, 1600, 13000, 470000, 60, 0, 0, 0),  // Core 2\n        longArrayOf(128000, 1900, 14500, 455000, 90, 0, 0, 0)   // Core 3\n    )\n)\n\nprintln(processorCpuLoadBetweenTicks) // e.g. [0.18, 0.23, 0.14, 0.27]\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/logical_processor/","title":"Logical Processor","text":"<p>Represents a logical CPU core or thread in the system providing detailed information about the logical processor's  mapping to physical processors, NUMA nodes, and processor groups</p>"},{"location":"desktop/hardware/centralprocessor/logical_processor/#properties","title":"Properties","text":""},{"location":"desktop/hardware/centralprocessor/logical_processor/#processornumber","title":"processorNumber","text":"<p>The unique identifier of the logical processor</p> <pre><code>val logicalProcessors = centralProcessor.logicalProcessors\nval sample: LogicalProcessor = logicalProcessors.first()\n\nval processorNumber: Int = sample.processorNumber\n\nprintln(processorNumber) // e.g. 7\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/logical_processor/#physicalprocessornumber","title":"physicalProcessorNumber","text":"<p>The physical core number to which this logical processor belongs</p> <pre><code>val logicalProcessors = centralProcessor.logicalProcessors\nval sample: LogicalProcessor = logicalProcessors.first()\n\nval physicalProcessorNumber: Int = sample.physicalProcessorNumber\n\nprintln(physicalProcessorNumber) // e.g. 7\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/logical_processor/#physicalpackagenumber","title":"physicalPackageNumber","text":"<p>The physical CPU package to which this logical processor belongs</p> <pre><code>val logicalProcessors = centralProcessor.logicalProcessors\nval sample: LogicalProcessor = logicalProcessors.first()\n\nval physicalPackageNumber: Int = sample.physicalPackageNumber\n\nprintln(physicalPackageNumber) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/logical_processor/#numanode","title":"numaNode","text":"<p>The NUMA (Non-Uniform Memory Access) node to which this logical processor is assigned</p> <pre><code>val logicalProcessors = centralProcessor.logicalProcessors\nval sample: LogicalProcessor = logicalProcessors.first()\n\nval numaNode: Int = sample.numaNode\n\nprintln(numaNode) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/logical_processor/#processorgroup","title":"processorGroup","text":"<p>The processor group for systems that support grouping of processors</p> <pre><code>val logicalProcessors = centralProcessor.logicalProcessors\nval sample: LogicalProcessor = logicalProcessors.first()\n\nval processorGroup: Int = sample.processorGroup\n\nprintln(processorGroup) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/physical_processor/","title":"Physical Processor","text":"<p>Represents a physical processor in the system, providing information about the physical CPU core, its package,  and efficiency, along with its unique identifier string</p>"},{"location":"desktop/hardware/centralprocessor/physical_processor/#properties","title":"Properties","text":""},{"location":"desktop/hardware/centralprocessor/physical_processor/#physicalpackagenumber","title":"physicalPackageNumber","text":"<p>The unique identifier of the logical processor</p> <pre><code>val physicalProcessors = centralProcessor.physicalProcessors\nval sample: PhysicalProcessor = physicalProcessors.first()\n\nval physicalPackageNumber: Int = sample.physicalPackageNumber\n\nprintln(physicalPackageNumber) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/physical_processor/#physicalprocessornumber","title":"physicalProcessorNumber","text":"<p>The unique identifier for the physical processor in the package</p> <pre><code>val physicalProcessors = centralProcessor.physicalProcessors\nval sample: PhysicalProcessor = physicalProcessors.first()\n\nval physicalProcessorNumber: Int = sample.physicalProcessorNumber\n\nprintln(physicalProcessorNumber) // e.g. 7\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/physical_processor/#efficiency","title":"efficiency","text":"<p>The efficiency level of the physical processor, this value indicates how efficiently the processor operates</p> <pre><code>val physicalProcessors = centralProcessor.physicalProcessors\nval sample: PhysicalProcessor = physicalProcessors.first()\n\nval efficiency: Int = sample.efficiency\n\nprintln(efficiency) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/physical_processor/#idstring","title":"idString","text":"<p>A unique string identifier for this physical processor, often used to distinguish between different processors in the system</p> <pre><code>val physicalProcessors = centralProcessor.physicalProcessors\nval sample: PhysicalProcessor = physicalProcessors.first()\n\nval idString: String = sample.idString\n\nprintln(idString) // e.g. BFEBFBFF000306A9\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/processor_cache/","title":"Processor Cache","text":"<p>Represents a processor's cache with its properties like level, associativity, line size, cache size, and cache type</p>"},{"location":"desktop/hardware/centralprocessor/processor_cache/#properties","title":"Properties","text":""},{"location":"desktop/hardware/centralprocessor/processor_cache/#level","title":"level","text":"<p>The unique identifier of the logical processor</p> <pre><code>val processorCaches = centralProcessor.processorCaches\nval sample: ProcessorCache = processorCaches.first()\n\nval level: Byte = sample.level\n\nprintln(level) // e.g. 2\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/processor_cache/#associativity","title":"associativity","text":"<p>The associativity of the cache</p> <pre><code>val processorCaches = centralProcessor.processorCaches\nval sample: ProcessorCache = processorCaches.first()\n\nval associativity: Byte = sample.associativity\n\nprintln(associativity) // e.g. 8\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/processor_cache/#linesize","title":"lineSize","text":"<p>The size of a cache line in bytes</p> <pre><code>val processorCaches = centralProcessor.processorCaches\nval sample: ProcessorCache = processorCaches.first()\n\nval lineSize: Byte = sample.lineSize\n\nprintln(lineSize) // e.g. 64\n</code></pre>"},{"location":"desktop/hardware/centralprocessor/processor_cache/#cachesize","title":"cacheSize","text":"<p>The total size of the cache in bytes</p> <pre><code>val processorCaches = centralProcessor.processorCaches\nval sample: ProcessorCache = processorCaches.first()\n\nval cacheSize: Byte = sample.cacheSize\n\nprintln(cacheSize) // e.g. 32768\n</code></pre>"},{"location":"desktop/hardware/computersystem/baseboard/","title":"Baseboard","text":"<p>The information refer to the baseboard or motherboard of the computer system</p>"},{"location":"desktop/hardware/computersystem/baseboard/#original-source","title":"Original source","text":"<p>The baseboard information are retrieved from <code>Hardware.ComputerSystem.Baseboard</code> interface</p>"},{"location":"desktop/hardware/computersystem/baseboard/#kinfos-source","title":"KInfo's source","text":"<pre><code>val baseboard = computerSystem.baseboard\n</code></pre>"},{"location":"desktop/hardware/computersystem/baseboard/#properties","title":"Properties","text":""},{"location":"desktop/hardware/computersystem/baseboard/#manufacturer","title":"manufacturer","text":"<p>The manufacturer of the baseboard</p> <pre><code>val manufacturer: String = baseboard.manufacturer\n\nprintln(manufacturer) // e.g. Gigabyte\n</code></pre>"},{"location":"desktop/hardware/computersystem/baseboard/#model","title":"model","text":"<p>The model name or number of the baseboard</p> <pre><code>val model: String = baseboard.model\n\nprintln(model) // e.g. 21CBCTO1WW\n</code></pre>"},{"location":"desktop/hardware/computersystem/baseboard/#version","title":"version","text":"<p>The version of the baseboard</p> <pre><code>val version: String = baseboard.version\n\nprintln(version) // e.g. often \"Not Specified\"\n</code></pre>"},{"location":"desktop/hardware/computersystem/baseboard/#serialnumber","title":"serialNumber","text":"<p>The serial number of the baseboard</p> <pre><code>val serialNumber: String = baseboard.serialNumber\n\nprintln(serialNumber) // e.g. SN0000000000\n</code></pre>"},{"location":"desktop/hardware/computersystem/computer_system/","title":"Computer system","text":"<p>The information refer to the computer system</p>"},{"location":"desktop/hardware/computersystem/computer_system/#original-source","title":"Original source","text":"<p>The computer system information are retrieved from <code>Hardware.ComputerSystem</code> interface</p>"},{"location":"desktop/hardware/computersystem/computer_system/#kinfos-source","title":"KInfo's source","text":"<pre><code>val computerSystem = hardware.computerSystem\n</code></pre>"},{"location":"desktop/hardware/computersystem/computer_system/#properties","title":"Properties","text":""},{"location":"desktop/hardware/computersystem/computer_system/#manufacturer","title":"manufacturer","text":"<p>The manufacturer of the computer system</p> <pre><code>val manufacturer: String = computerSystem.manufacturer\n\nprintln(manufacturer) // e.g. Lenovo\n</code></pre>"},{"location":"desktop/hardware/computersystem/computer_system/#model","title":"model","text":"<p>The model of the computer system</p> <pre><code>val model: String = computerSystem.model\n\nprintln(model) // e.g. 82RB\n</code></pre>"},{"location":"desktop/hardware/computersystem/computer_system/#serialnumber","title":"serialNumber","text":"<p>The serial number of the computer system</p> <pre><code>val serialNumber: String = computerSystem.serialNumber\n\nprintln(serialNumber) // e.g. PF3X1234\n</code></pre>"},{"location":"desktop/hardware/computersystem/computer_system/#hardwareuuid","title":"hardwareUUID","text":"<p>The unique hardware identifier for the system</p> <pre><code>val hardwareUUID: String = computerSystem.hardwareUUID\n\nprintln(hardwareUUID) // e.g. 00000000-0000-0000-0000-000000000000\n</code></pre>"},{"location":"desktop/hardware/computersystem/firmware/","title":"Firmware","text":"<p>The information refer to the firmware of the computer system</p>"},{"location":"desktop/hardware/computersystem/firmware/#original-source","title":"Original source","text":"<p>The firmware information are retrieved from <code>Hardware.ComputerSystem.Firmware</code> interface</p>"},{"location":"desktop/hardware/computersystem/firmware/#kinfos-source","title":"KInfo's source","text":"<pre><code>val firmware = computerSystem.firmware\n</code></pre>"},{"location":"desktop/hardware/computersystem/firmware/#properties","title":"Properties","text":""},{"location":"desktop/hardware/computersystem/firmware/#manufacturer","title":"manufacturer","text":"<p>The manufacturer of the firmware</p> <pre><code>val manufacturer: String = firmware.manufacturer\n\nprintln(manufacturer) // e.g. Microsoft\n</code></pre>"},{"location":"desktop/hardware/computersystem/firmware/#name","title":"name","text":"<p>The name of the firmware</p> <pre><code>val name: String = firmware.name\n\nprintln(name) // e.g. UEFI\n</code></pre>"},{"location":"desktop/hardware/computersystem/firmware/#description","title":"description","text":"<p>Detailed description of the firmware</p> <pre><code>val description: String = firmware.description\n\nprintln(description) // e.g. LENOVO BIOS Rev 1.45 (UEFI)\n</code></pre>"},{"location":"desktop/hardware/computersystem/firmware/#version","title":"version","text":"<p>The version number of the firmware</p> <pre><code>val version: String = firmware.version\n\nprintln(version) // e.g. 2.5.3\n</code></pre>"},{"location":"desktop/hardware/computersystem/firmware/#releasedate","title":"releaseDate","text":"<p>The release date of the firmware</p> <pre><code>val releaseDate: String = firmware.releaseDate\n\nprintln(releaseDate) // e.g. 06/10/2024\n</code></pre>"},{"location":"desktop/hardware/globalmemory/global_memory/","title":"Global memory","text":"<p>The information refer the system's global memory</p>"},{"location":"desktop/hardware/globalmemory/global_memory/#original-source","title":"Original source","text":"<p>The global memory information are retrieved from <code>Hardware.GlobalMemory</code> interface</p>"},{"location":"desktop/hardware/globalmemory/global_memory/#kinfos-source","title":"KInfo's source","text":"<pre><code>val globalMemory = hardware.globalMemory\n</code></pre>"},{"location":"desktop/hardware/globalmemory/global_memory/#properties","title":"Properties","text":""},{"location":"desktop/hardware/globalmemory/global_memory/#total","title":"total","text":"<p>The total amount of memory in the system (in bytes)</p> <pre><code>val total: Long = globalMemory.total\n\nprintln(total) // e.g. 54281037824\n</code></pre>"},{"location":"desktop/hardware/globalmemory/global_memory/#available","title":"available","text":"<p>The amount of available memory in the system (in bytes)</p> <pre><code>val available: Long = globalMemory.available\n\nprintln(available) // e.g. 13558046720\n</code></pre>"},{"location":"desktop/hardware/globalmemory/global_memory/#pagesize","title":"pageSize","text":"<p>The system's memory page size (in bytes)</p> <pre><code>val pageSize: Long = globalMemory.pageSize\n\nprintln(pageSize) // e.g. 4096\n</code></pre>"},{"location":"desktop/hardware/globalmemory/global_memory/#physicalmemory","title":"physicalMemory","text":"<p>List of physical memory, provides details about each physical memory module installed</p> <pre><code>val physicalMemory: List&lt;PhysicalMemory&gt; = globalMemory.physicalMemory\n\nprintln(physicalMemory)\n</code></pre>"},{"location":"desktop/hardware/globalmemory/physical_memory/","title":"Physical memory","text":"<p>Represents the details of a physical memory module installed in the system, providing information such as the  memory's bank label, capacity, clock speed, manufacturer, memory type, part number, and serial number</p>"},{"location":"desktop/hardware/globalmemory/physical_memory/#properties","title":"Properties","text":""},{"location":"desktop/hardware/globalmemory/physical_memory/#banklabel","title":"bankLabel","text":"<p>The label or identifier of the memory bank where the module is located</p> <pre><code>val physicalMemory = globalMemory.physicalMemory\nval sample: PhysicalMemory = physicalMemory.first()\n\nval bankLabel: String = sample.bankLabel\n\nprintln(bankLabel) // e.g. P0 CHANNEL A\n</code></pre>"},{"location":"desktop/hardware/globalmemory/physical_memory/#capacity","title":"capacity","text":"<p>The total capacity of the memory module (in bytes)</p> <pre><code>val physicalMemory = globalMemory.physicalMemory\nval sample: PhysicalMemory = physicalMemory.first()\n\nval capacity: Long = sample.capacity\n\nprintln(capacity) // e.g. 17179869184\n</code></pre>"},{"location":"desktop/hardware/globalmemory/physical_memory/#clockspeed","title":"clockSpeed","text":"<p>The clock speed of the memory module (in MHz)</p> <pre><code>val physicalMemory = globalMemory.physicalMemory\nval sample: PhysicalMemory = physicalMemory.first()\n\nval clockSpeed: Long = sample.clockSpeed\n\nprintln(clockSpeed) // e.g. 2667000000\n</code></pre>"},{"location":"desktop/hardware/globalmemory/physical_memory/#manufacturer","title":"manufacturer","text":"<p>The manufacturer of the memory module</p> <pre><code>val physicalMemory = globalMemory.physicalMemory\nval sample: PhysicalMemory = physicalMemory.first()\n\nval manufacturer: String = sample.manufacturer\n\nprintln(manufacturer) // e.g. Corsair\n</code></pre>"},{"location":"desktop/hardware/globalmemory/physical_memory/#memorytype","title":"memoryType","text":"<p>The type of memory</p> <pre><code>val physicalMemory = globalMemory.physicalMemory\nval sample: PhysicalMemory = physicalMemory.first()\n\nval memoryType: String = sample.memoryType\n\nprintln(memoryType) // e.g. DDR4\n</code></pre>"},{"location":"desktop/hardware/globalmemory/physical_memory/#partnumber","title":"partNumber","text":"<p>The part number of the memory module</p> <pre><code>val physicalMemory = globalMemory.physicalMemory\nval sample: PhysicalMemory = physicalMemory.first()\n\nval partNumber: String = sample.partNumber\n\nprintln(partNumber) // e.g. CMK16GX4M2B3200C16\n</code></pre>"},{"location":"desktop/hardware/globalmemory/physical_memory/#serialnumber","title":"serialNumber","text":"<p>The serial number of the memory module</p> <pre><code>val physicalMemory = globalMemory.physicalMemory\nval sample: PhysicalMemory = physicalMemory.first()\n\nval serialNumber: String = sample.serialNumber\n\nprintln(serialNumber) // e.g. 00000000\n</code></pre>"},{"location":"desktop/hardware/globalmemory/virtual_memory/","title":"Virtual memory","text":"<p>Represents the virtual memory statistics of the system, providing detailed information about the swap memory, virtual memory limits, and usage statistics.</p>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#original-source","title":"Original source","text":"<p>The baseboard information are retrieved from <code>Hardware.GlobalMemory.VirtualMemory</code> interface</p>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#kinfos-source","title":"KInfo's source","text":"<pre><code>val virtualMemory = globalMemory.virtualMemory\n</code></pre>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#properties","title":"Properties","text":""},{"location":"desktop/hardware/globalmemory/virtual_memory/#swaptotal","title":"swapTotal","text":"<p>The total amount of swap space available in the system (in bytes)</p> <pre><code>val swapTotal: Long = virtualMemory.swapTotal\n\nprintln(swapTotal) // e.g. 1087007744\n</code></pre>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#swapused","title":"swapUsed","text":"<p>The amount of swap space currently being used (in bytes)</p> <pre><code>val swapUsed: Long = virtualMemory.swapUsed\n\nprintln(swapUsed) // e.g. 67686400\n</code></pre>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#virtualmax","title":"virtualMax","text":"<p>The maximum amount of virtual memory that the system can use (in bytes)</p> <pre><code>val virtualMax: Long = virtualMemory.virtualMax\n\nprintln(virtualMax) // e.g. 27368045568\n</code></pre>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#virtualinuse","title":"virtualInUse","text":"<p>The amount of virtual memory currently in use (in bytes)</p> <pre><code>val virtualInUse: Long = virtualMemory.virtualInUse\n\nprintln(virtualInUse) // e.g. 13934660608\n</code></pre>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#swappagesin","title":"swapPagesIn","text":"<p>The number of pages that have been swapped in from disk into memory</p> <pre><code>val swapPagesIn: Long = virtualMemory.swapPagesIn\n\nprintln(swapPagesIn) // e.g. 5001722\n</code></pre>"},{"location":"desktop/hardware/globalmemory/virtual_memory/#swappagesout","title":"swapPagesOut","text":"<p>The number of pages that have been swapped out from memory to disk</p> <pre><code>val swapPagesOut: Long = virtualMemory.swapPagesOut\n\nprintln(swapPagesOut) // e.g. 44085\n</code></pre>"},{"location":"desktop/hardware/sensors/sensors/","title":"Sensors","text":"<p>Information refer to various sensor data of a computer system. This includes CPU temperature, fan speeds, and CPU voltage</p>"},{"location":"desktop/hardware/sensors/sensors/#original-source","title":"Original source","text":"<p>The sensors information are retrieved from <code>Hardware.Sensors</code> interface</p>"},{"location":"desktop/hardware/sensors/sensors/#kinfos-source","title":"KInfo's source","text":"<pre><code>val sensors = hardware.sensors\n</code></pre>"},{"location":"desktop/hardware/sensors/sensors/#properties","title":"Properties","text":""},{"location":"desktop/hardware/sensors/sensors/#cputemperature","title":"cpuTemperature","text":"<p>The current temperature of the CPU in degrees Celsius</p> <pre><code>val cpuTemperature: Double = sensors.cpuTemperature\n\nprintln(cpuTemperature) // e.g. 65.3\n</code></pre>"},{"location":"desktop/hardware/sensors/sensors/#fanspeeds","title":"fanSpeeds","text":"<p>The speeds of the fans in the system, in RPM (Revolutions per Minute)</p> <pre><code>val fanSpeeds: IntArray = sensors.fanSpeeds\n\nprintln(fanSpeeds) // e.g. [1200, 1300, 1150]\n</code></pre>"},{"location":"desktop/hardware/sensors/sensors/#cpuvoltage","title":"cpuVoltage","text":"<p>The current voltage supplied to the CPU, in volts</p> <pre><code>val cpuVoltage: Double = sensors.cpuVoltage\n\nprintln(cpuVoltage) // e.g. 1.25\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/","title":"Disk store","text":"<p>Represents information about a disk or storage device in the system, providing details about the disk's model, serial number, size, read/write statistics, partitions, and other attributes</p>"},{"location":"desktop/hardware/storage/hw_disk_store/#properties","title":"Properties","text":""},{"location":"desktop/hardware/storage/hw_disk_store/#name","title":"name","text":"<p>The name or identifier of the disk</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. disk0\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#model","title":"model","text":"<p>The model name of the disk</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval model: String = sample.model\n\nprintln(model) // e.g. Samsung SSD 860\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#serial","title":"serial","text":"<p>The serial number of the disk</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval serial: String = sample.serial\n\nprintln(serial) // e.g. S4EWNX0M123456A\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#size","title":"size","text":"<p>The total size of the disk (in bytes)</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval size: Long = sample.size\n\nprintln(size) // e.g. 512101820160\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#reads","title":"reads","text":"<p>The number of read operations performed on the disk</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval reads: Long = sample.reads\n\nprintln(reads) // e.g. 400000\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#readbytes","title":"readBytes","text":"<p>The number of bytes read from the disk</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval readBytes: Long = sample.readBytes\n\nprintln(readBytes) // e.g. 1000000000\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#writes","title":"writes","text":"<p>The number of write operations performed on the disk</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval writes: Long = sample.writes\n\nprintln(writes) // e.g. 800000\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#writesbytes","title":"writesBytes","text":"<p>The number of bytes written to the disk</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval writesBytes: Long = sample.writesBytes\n\nprintln(writesBytes) // e.g. 1000000000\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#currentqueuelength","title":"currentQueueLength","text":"<p>The current length of the disk's I/O request queue</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval currentQueueLength: Long = sample.currentQueueLength\n\nprintln(currentQueueLength) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#transfertime","title":"transferTime","text":"<p>The time (in milliseconds) spent transferring data for I/O operations</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval transferTime: Long = sample.transferTime\n\nprintln(transferTime) // e.g. 5047355\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#partitions","title":"partitions","text":"<p>List of partitions on the disk</p> <pre><code>val partitions: List&lt;HWPartition&gt; = hardware.partitions\n\nprintln(partitions)\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#timestamp","title":"timestamp","text":"<p>The timestamp when the disk information was last updated</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval timestamp: Long = sample.timestamp\n\nprintln(timestamp) // e.g. 1760544083287\n</code></pre>"},{"location":"desktop/hardware/storage/hw_disk_store/#updateattributes","title":"updateAttributes","text":"<p>A flag indicating whether the disk's attributes should be updated</p> <pre><code>val diskStores = hardware.diskStores\nval sample: HWDiskStore = diskStores.first()\n\nval updateAttributes: Boolean = sample.updateAttributes\n\nprintln(updateAttributes) // true or false\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/","title":"Partition","text":"<p>Represents a hardware partition on a storage device, providing details about the partition such as its identification, name, type, UUID, size, and mount point</p>"},{"location":"desktop/hardware/storage/hw_partition/#properties","title":"Properties","text":""},{"location":"desktop/hardware/storage/hw_partition/#identification","title":"identification","text":"<p>The unique identifier of the partition</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval identification: String = sample.identification\n\nprintln(identification) // e.g. Disk #0, partition #1\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/#name","title":"name","text":"<p>The unique identifier of the partition</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. GPT: Basic Data\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/#type","title":"type","text":"<p>The type of the partition</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval type: String = sample.type\n\nprintln(type) // e.g. NTFS\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/#uuid","title":"uuid","text":"<p>The UUID (Universally Unique Identifier) of the partition</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval uuid: String = sample.uuid\n\nprintln(uuid) // e.g. 00000000-0000-0000-0000-000000000000\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/#size","title":"size","text":"<p>The total size of the partition (in bytes)</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval size: Long = sample.size\n\nprintln(size) // e.g. 511633784832\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/#major","title":"major","text":"<p>The major number of the partition</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval major: Int = sample.major\n\nprintln(major) // e.g. 0\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/#minor","title":"minor","text":"<p>The minor number of the partition</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval minor: Int = sample.minor\n\nprintln(minor) // e.g. 1\n</code></pre>"},{"location":"desktop/hardware/storage/hw_partition/#mountpoint","title":"mountPoint","text":"<p>The mount point of the partition</p> <pre><code>val diskStores = hardware.diskStores\nval diskStore: HWDiskStore = diskStores.first()\n\nval partitions = diskStore.partitions\nval sample: HWPartition = partitions.first()\n\nval mountPoint: String = sample.mountPoint\n\nprintln(mountPoint) // e.g. /home\n</code></pre>"},{"location":"desktop/operatingsystem/","title":"Operating system","text":"<p>The information refer to the operating system of the device</p>"},{"location":"desktop/operatingsystem/#available-information","title":"Available information","text":"<p>On desktop target the available operating system information are the below:</p> Category Property Description Source App Info <code>name</code> The name of the application <code>OperatingSystem.queryInstalledApps</code> <code>version</code> The version of the application <code>vendor</code> The vendor or publisher of the application <code>timestamp</code> The installation or last modified timestamp of the application in milliseconds since epoch <code>additionalInfo</code> A map containing additional application details OS Info <code>family</code> The family or type of the operating system <code>OperatingSystem.family</code> <code>manufacturer</code> The manufacturer of the operating system <code>OperatingSystem.manufacturer</code> <code>versionInfo</code> The version information of the operating system <code>OperatingSystem.versionInfo</code> System Info <code>bitness</code> The bitness of the operating system <code>OperatingSystem.bitness</code> <code>systemUptime</code> The system uptime in milliseconds since the operating system started <code>OperatingSystem.systemUptime</code> <code>systemBootTime</code> The time in milliseconds when the system was last booted (Unix timestamp) <code>OperatingSystem.systemBootTime</code> <code>isElevated</code> A flag indicating whether the operating system is running with elevated privileges <code>OperatingSystem.isElevated</code> File System Info <code>fileSystem</code> The file system information of the operating system <code>OperatingSystem.fileSystem</code> Process Info <code>processId</code> The process ID of the currently running operating system process <code>OperatingSystem.processId</code> <code>currentProcess</code> The currently running process of the operating system <code>OperatingSystem.currentProcess</code> <code>processCount</code> The total number of processes running on the operating system <code>OperatingSystem.processCount</code> Thread Info <code>threadId</code> The thread ID of the currently running thread <code>OperatingSystem.threadId</code> <code>currentThread</code> The currently running thread of the operating system <code>OperatingSystem.currentThread</code> <code>threadCount</code> The total number of threads running on the operating system <code>OperatingSystem.threadCount</code> Network Info <code>internetProtocolStats</code> The internet protocol statistics related to network connections <code>OperatingSystem.internetProtocolStats</code> Network Params <code>networkParams</code> The network parameters of the operating system <code>OperatingSystem.networkParams</code> Service Info <code>services</code> The list of services running on the operating system <code>OperatingSystem.services</code> Session Info <code>sessions</code> The list of user sessions currently active on the operating system <code>OperatingSystem.sessions</code>"},{"location":"desktop/operatingsystem/#api-source","title":"API source","text":"<p>The information are retrievable using the <code>DesktopInfo.OperatingSystem</code> API:</p>"},{"location":"desktop/operatingsystem/#operatingsystem-api","title":"OperatingSystem API","text":"<p>Retrieve a <code>OperatingSystem</code> instance from <code>desktopInfo</code> instance</p> <pre><code>val operatingSystem = desktopInfo.operatingSystem\n</code></pre>"},{"location":"desktop/operatingsystem/#properties","title":"Properties","text":"<p>The below properties are miscellaneous readable properties provided by the operatingSystem instance </p>"},{"location":"desktop/operatingsystem/#family","title":"family","text":"<p>The family or type of the operating system</p> <pre><code>val family: String = operatingSystem.family\n\nprintln(family) // e.g. Windows\n</code></pre>"},{"location":"desktop/operatingsystem/#manufacturer","title":"manufacturer","text":"<p>The manufacturer of the operating system</p> <pre><code>val manufacturer: String = operatingSystem.manufacturer\n\nprintln(manufacturer) // e.g. Microsoft\n</code></pre>"},{"location":"desktop/operatingsystem/#processid","title":"processId","text":"<p>The process ID of the currently running operating system process</p> <pre><code>val processId: Int = operatingSystem.processId\n\nprintln(processId) // e.g. 22000\n</code></pre>"},{"location":"desktop/operatingsystem/#processcount","title":"processCount","text":"<p>The total number of processes running on the operating system</p> <pre><code>val processCount: Int = operatingSystem.processCount\n\nprintln(processCount) // e.g. 243\n</code></pre>"},{"location":"desktop/operatingsystem/#threadid","title":"threadId","text":"<p>The thread ID of the currently running thread</p> <pre><code>val threadId: Int = operatingSystem.threadId\n\nprintln(threadId) // e.g. 13124\n</code></pre>"},{"location":"desktop/operatingsystem/#threadcount","title":"threadCount","text":"<p>The total number of threads running on the operating system</p> <pre><code>val threadCount: Int = operatingSystem.threadCount\n\nprintln(threadCount) // e.g. 4509\n</code></pre>"},{"location":"desktop/operatingsystem/#bitness","title":"bitness","text":"<p>The bitness of the operating system</p> <pre><code>val bitness: Int = operatingSystem.bitness\n\nprintln(bitness) // e.g. 32\n</code></pre>"},{"location":"desktop/operatingsystem/#systemuptime","title":"systemUptime","text":"<p>The system uptime in seconds since the operating system started</p> <pre><code>val systemUptime: Long = operatingSystem.systemUptime\n\nprintln(systemUptime) // e.g. 1078\n</code></pre>"},{"location":"desktop/operatingsystem/#systemboottime","title":"systemBootTime","text":"<p>The timestamp when the system was last booted (Unix timestamp)</p> <pre><code>val systemBootTime: Long = operatingSystem.systemBootTime\n\nprintln(systemBootTime) // e.g. 1760598078\n</code></pre>"},{"location":"desktop/operatingsystem/#iselevated","title":"isElevated","text":"<p>A flag indicating whether the operating system is running with elevated privileges (e.g., as an administrator)</p> <pre><code>val isElevated: Boolean = operatingSystem.isElevated\n\nprintln(isElevated) // true or false\n</code></pre>"},{"location":"desktop/operatingsystem/#services","title":"services","text":"<p>The list of services running on the operating system</p> <pre><code>val services: List&lt;OSService&gt; = operatingSystem.services\n\nprintln(services)\n</code></pre>"},{"location":"desktop/operatingsystem/#sessions","title":"sessions","text":"<p>The list of user sessions currently active on the operating system</p> <pre><code>val sessions: List&lt;OSSession&gt; = operatingSystem.sessions\n\nprintln(sessions)\n</code></pre>"},{"location":"desktop/operatingsystem/#methods","title":"Methods","text":"<p>The below methods are provided by operatingSystem instance, and are useful to interact with the  operating system to retrieve any available information</p>"},{"location":"desktop/operatingsystem/#getprocesses","title":"getProcesses","text":"<p>Retrieves the list of all running processes on the operating system</p>"},{"location":"desktop/operatingsystem/#interfaces","title":"Interfaces","text":"<ul> <li>OSProcess - Represents a process in the operating system</li> </ul> <pre><code>val processes: List&lt;OSProcess&gt; = operatingSystem.getProcesses()\n\nprintln(processes)\n</code></pre>"},{"location":"desktop/operatingsystem/#getprocess","title":"getProcess","text":"<p>Retrieves a single process by its process ID</p>"},{"location":"desktop/operatingsystem/#parameters","title":"Parameters","text":"<ul> <li>pid <code>:Int</code> - The process ID of the process to retrieve</li> </ul>"},{"location":"desktop/operatingsystem/#interfaces_1","title":"Interfaces","text":"<ul> <li>OSProcess - Represents a process in the operating system</li> </ul> <pre><code>val process: OSProcess = operatingSystem.getProcess(\n    pid = 12202\n)\n\nprintln(process)\n</code></pre>"},{"location":"desktop/operatingsystem/#getosdesktopwindows","title":"getOSDesktopWindows","text":"<p>Retrieves the desktop windows of the operating system</p>"},{"location":"desktop/operatingsystem/#parameters_1","title":"Parameters","text":"<ul> <li>visibleOnly <code>:Boolean</code> - A flag indicating whether to retrieve only the visible desktop windows (<code>true</code>) or all desktop windows (<code>false</code>)</li> </ul>"},{"location":"desktop/operatingsystem/#interfaces_2","title":"Interfaces","text":"<ul> <li>OSDesktopWindow - Represents a desktop window on the operating system</li> </ul> <pre><code>val desktopWindows: List&lt;OSDesktopWindow&gt; = operatingSystem.getOSDesktopWindows(\n    visibleOnly = // true or false\n)\n\nprintln(desktopWindows)\n</code></pre>"},{"location":"desktop/operatingsystem/#parsenestedstatistics","title":"parseNestedStatistics","text":"<p>Parses <code>/proc</code> files with a given structure consisting of a keyed header line followed by a keyed value line</p>"},{"location":"desktop/operatingsystem/#parameters_2","title":"Parameters","text":"<ul> <li>procFile <code>:String</code> - The file to process</li> <li>keys <code>:vararg String</code> - Optional array of keys to include in the outer map. If not provided, all keys found in the file will be returned</li> </ul> <pre><code>val nestedStatistic: Map&lt;String, Map&lt;String, Long&gt;&gt; = operatingSystem.parseNestedStatistics(\n    procFile =, // proc file,\n    keys = // requested keys\n)\n\nprintln(nestedStatistic)\n// e.g. \n// {\n//     \"TcpExt\": {\"SyncookiesSent\": 0, \"SyncookiesRecv\": 4, \"SyncookiesFailed\": 0, ... },\n//     \"IpExt\": {\"InNoRoutes\": 55, \"InTruncatedPkts\": 0, \"InMcastPkts\": 27786, \"OutMcastPkts\": 1435, ... },\n//     \"MPTcpExt\": {\"MPCapableSYNRX\": 0, \"MPCapableSYNTX\": 0, \"MPCapableSYNACKRX\": 0, ... }\n// }\n</code></pre>"},{"location":"desktop/operatingsystem/#parsestatistics","title":"parseStatistics","text":"<p>Parses <code>/proc</code> files formatted as \"statistic (long)value\" to produce a simple mapping</p>"},{"location":"desktop/operatingsystem/#parameters_3","title":"Parameters","text":"<ul> <li>procFile <code>:String</code> - The file to process</li> <li>separator <code>:Regex</code> - A regular expression specifying the separator between the statistic name and its value</li> </ul> <pre><code>val statistics: Map&lt;String, Long&gt; = operatingSystem.parseStatistics(\n    procFile =, // proc file,\n    separator = // custom separator\n)\n\nprintln(statistics)\n// e.g. \n// {\n//     \"Ip6InReceives\": 8026,\n//     \"Ip6InHdrErrors\": 0,\n//     \"Icmp6InMsgs\": 2,\n//     \"Icmp6InErrors\": 0,\n//     ...\n// }\n</code></pre>"},{"location":"desktop/operatingsystem/#queryinstalledapps","title":"queryInstalledApps","text":"<p>Method used to retrieve the current installed applications on the system</p>"},{"location":"desktop/operatingsystem/#interfaces_3","title":"Interfaces","text":"<ul> <li>ApplicationInfo - Represents common information about an installed application</li> </ul> <pre><code>val installedApps: List&lt;ApplicationInfo&gt; = operatingSystem.queryInstalledApps()\n\nprintln(installedApps)\n</code></pre>"},{"location":"desktop/operatingsystem/#findinstalledapp","title":"findInstalledApp","text":"<p>Method used to find an installed application by name</p>"},{"location":"desktop/operatingsystem/#parameters_4","title":"Parameters","text":"<ul> <li>name <code>:String</code> - The name of the application to find</li> </ul>"},{"location":"desktop/operatingsystem/#interfaces_4","title":"Interfaces","text":"<ul> <li>ApplicationInfo - Represents common information about an installed application</li> </ul> <pre><code>val installedApp: ApplicationInfo? = operatingSystem.findInstalledApp(\n    name = \"MyApp\"\n)\n\nprintln(installedApp)\n</code></pre>"},{"location":"desktop/operatingsystem/#findinstalledapps","title":"findInstalledApps","text":"<p>Method used to find an installed applications list by a filter condition</p>"},{"location":"desktop/operatingsystem/#parameters_5","title":"Parameters","text":"<ul> <li>applicationFilter <code>:(ApplicationInfo) -&gt; Boolean</code> - The filter used to determine whether the application must be included in the retrieved list</li> </ul>"},{"location":"desktop/operatingsystem/#interfaces_5","title":"Interfaces","text":"<ul> <li>ApplicationInfo - Represents common information about an installed application</li> </ul> <pre><code>val installedApps: List&lt;ApplicationInfo&gt; = operatingSystem.findInstalledApps(\n    applicationFilter = { app -&gt;\n        app.version == \"1.0.0\"\n    }\n)\n\nprintln(installedApps)\n</code></pre>"},{"location":"desktop/operatingsystem/application_info/","title":"Application info","text":"<p>Represents common information about an installed application across different operating systems. This class provides  standardized access to essential application details while allowing flexibility for OS-specific fields via an additional information map</p>"},{"location":"desktop/operatingsystem/application_info/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/application_info/#name","title":"name","text":"<p>The name of the application</p> <pre><code>val installedApps = operatingSystem.queryInstalledApps()\nval sample: ApplicationInfo = installedApps.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. MyApp\n</code></pre>"},{"location":"desktop/operatingsystem/application_info/#version","title":"version","text":"<p>The version of the application</p> <pre><code>val installedApps = operatingSystem.queryInstalledApps()\nval sample: ApplicationInfo = installedApps.first()\n\nval version: String = sample.version\n\nprintln(version) // e.g. 1.0.0\n</code></pre>"},{"location":"desktop/operatingsystem/application_info/#vendor","title":"vendor","text":"<p>The vendor or publisher of the application</p> <pre><code>val installedApps = operatingSystem.queryInstalledApps()\nval sample: ApplicationInfo = installedApps.first()\n\nval vendor: String = sample.vendor\n\nprintln(vendor) // e.g. Tecknobit\n</code></pre>"},{"location":"desktop/operatingsystem/application_info/#timestamp","title":"timestamp","text":"<p>The installation or last modified timestamp of the application in milliseconds since epoch.</p> <ul> <li>On Windows, this corresponds to the application's install date</li> <li>On Linux, it represents the package's installation or last modified time</li> <li>On macOS, it reflects the last modification timestamp of the application bundle</li> </ul> <pre><code>val installedApps = operatingSystem.queryInstalledApps()\nval sample: ApplicationInfo = installedApps.first()\n\nval timestamp: Long = sample.timestamp\n\nprintln(timestamp) // e.g. 1728800000000\n</code></pre>"},{"location":"desktop/operatingsystem/application_info/#additionalinfo","title":"additionalInfo","text":"<p>A map containing additional application details such as install location, source, etc. </p> <p>Keys are field names, and values are corresponding details</p> <pre><code>val installedApps = operatingSystem.queryInstalledApps()\nval sample: ApplicationInfo = installedApps.first()\n\nval additionalInfo: Map&lt;String, String&gt; = sample.additionalInfo\n\nprintln(additionalInfo) \n// e.g. {\"installLocation\"=\"/usr/share/code\", \"source\"=\"official\", \"license\"=\"MIT\"}\n</code></pre>"},{"location":"desktop/operatingsystem/network_params/","title":"Network params","text":"<p>Represents the network configuration parameters of a device, providing details about the host name, domain name, DNS servers, and default gateways for both IPv4 and IPv6</p>"},{"location":"desktop/operatingsystem/network_params/#original-source","title":"Original source","text":"<p>The operating system process information are retrieved from <code>OperatingSystem.NetworkParams</code> interface</p>"},{"location":"desktop/operatingsystem/network_params/#kinfos-source","title":"KInfo's source","text":"<pre><code>val networkParams = operatingSystem.networkParams\n</code></pre>"},{"location":"desktop/operatingsystem/network_params/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/network_params/#hostname","title":"hostName","text":"<p>The name of the device on the network</p> <pre><code>val hostName: String = currentProcess.hostName\n\nprintln(hostName) // e.g. MyComputer\n</code></pre>"},{"location":"desktop/operatingsystem/network_params/#domainname","title":"domainName","text":"<p>The domain name of the network or the device</p> <pre><code>val domainName: String = currentProcess.domainName\n\nprintln(domainName) // e.g. example.com\n</code></pre>"},{"location":"desktop/operatingsystem/network_params/#dnsservers","title":"dnsServers","text":"<p>A list of DNS server addresses used by the device for domain name resolution</p> <pre><code>val dnsServers: Array&lt;String&gt; = currentProcess.dnsServers\n\nprintln(dnsServers) // e.g. [\"8.8.8.8\", \"8.8.4.4\"]\n</code></pre>"},{"location":"desktop/operatingsystem/network_params/#ipv4defaultgateway","title":"ipv4DefaultGateway","text":"<p>The default gateway for IPv4 traffic, typically the router's IP address</p> <pre><code>val ipv4DefaultGateway: String = currentProcess.ipv4DefaultGateway\n\nprintln(ipv4DefaultGateway) // e.g. 192.168.1.1\n</code></pre>"},{"location":"desktop/operatingsystem/network_params/#ipv6defaultgateway","title":"ipv6DefaultGateway","text":"<p>The default gateway for IPv6 traffic, typically the router's IPv6 address</p> <pre><code>val ipv6DefaultGateway: String = currentProcess.ipv6DefaultGateway\n\nprintln(ipv6DefaultGateway) // e.g. fe80::1\n</code></pre>"},{"location":"desktop/operatingsystem/os_desktop_window/","title":"Desktop window","text":"<p>Represents a desktop window on the operating system, providing details about the window's properties, such as its ID, title, associated command, owning process ID, order in the stack, and visibility</p>"},{"location":"desktop/operatingsystem/os_desktop_window/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/os_desktop_window/#windowid","title":"windowId","text":"<p>The unique identifier for the window</p> <pre><code>val desktopWindows: List&lt;OSDesktopWindow&gt; = operatingSystem.getOSDesktopWindows(\n    visibleOnly = // true or false\n)\nval sample: OSDesktopWindow = desktopWindows.first()\n\nval windowId: Long = sample.windowId\n\nprintln(windowId) // e.g. 102345\n</code></pre>"},{"location":"desktop/operatingsystem/os_desktop_window/#title","title":"title","text":"<p>The title of the window</p> <pre><code>val desktopWindows: List&lt;OSDesktopWindow&gt; = operatingSystem.getOSDesktopWindows(\n    visibleOnly = // true or false\n)\nval sample: OSDesktopWindow = desktopWindows.first()\n\nval title: String = sample.title\n\nprintln(title) // e.g. MyApp\n</code></pre>"},{"location":"desktop/operatingsystem/os_desktop_window/#command","title":"command","text":"<p>The command or executable associated with the window</p> <pre><code>val desktopWindows: List&lt;OSDesktopWindow&gt; = operatingSystem.getOSDesktopWindows(\n    visibleOnly = // true or false\n)\nval sample: OSDesktopWindow = desktopWindows.first()\n\nval command: String = sample.command\n\nprintln(command) // e.g. /usr/bin/code\n</code></pre>"},{"location":"desktop/operatingsystem/os_desktop_window/#owningprocessid","title":"owningProcessId","text":"<p>The process ID of the application owning the window</p> <pre><code>val desktopWindows: List&lt;OSDesktopWindow&gt; = operatingSystem.getOSDesktopWindows(\n    visibleOnly = // true or false\n)\nval sample: OSDesktopWindow = desktopWindows.first()\n\nval owningProcessId: Long = sample.owningProcessId\n\nprintln(owningProcessId) // e.g. 2345\n</code></pre>"},{"location":"desktop/operatingsystem/os_desktop_window/#order","title":"order","text":"<p>The position of the window in the stacking order (e.g., topmost window)</p> <pre><code>val desktopWindows: List&lt;OSDesktopWindow&gt; = operatingSystem.getOSDesktopWindows(\n    visibleOnly = // true or false\n)\nval sample: OSDesktopWindow = desktopWindows.first()\n\nval order: Int = sample.order\n\nprintln(order) // e.g. 1\n</code></pre>"},{"location":"desktop/operatingsystem/os_desktop_window/#visible","title":"visible","text":"<p>A boolean indicating whether the window is currently visible</p> <pre><code>val desktopWindows: List&lt;OSDesktopWindow&gt; = operatingSystem.getOSDesktopWindows(\n    visibleOnly = // true or false\n)\nval sample: OSDesktopWindow = desktopWindows.first()\n\nval visible: Boolean = sample.visible\n\nprintln(visible) // true or false\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/","title":"OS process","text":"<p>Represents a process in the operating system, providing details about the process, including its name, ID, state, resources usage, and more</p>"},{"location":"desktop/operatingsystem/os_process/#original-source","title":"Original source","text":"<p>The operating system process information are retrieved from <code>OperatingSystem.OSProcess</code> interface</p>"},{"location":"desktop/operatingsystem/os_process/#kinfos-source","title":"KInfo's source","text":"<pre><code>val currentProcess = operatingSystem.currentProcess\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/os_process/#name","title":"name","text":"<p>The name of the process</p> <pre><code>val name: String = currentProcess.name\n\nprintln(name) // e.g. java\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#path","title":"path","text":"<p>The path to the executable of the process</p> <pre><code>val path: String = currentProcess.path\n\nprintln(path) // e.g. /usr/bin/java\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#commandline","title":"commandLine","text":"<p>The full command line that was used to start the process</p> <pre><code>val commandLine: String = currentProcess.commandLine\n\nprintln(commandLine) // e.g. /usr/bin/java -jar myapp.jar --port 8080\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#arguments","title":"arguments","text":"<p>The arguments passed to the process when it was started</p> <pre><code>val arguments: List&lt;String&gt; = currentProcess.arguments\n\nprintln(arguments) // e.g. [\"-jar\", \"myapp.jar\", \"--port\", \"8080\"]\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#environmentvariables","title":"environmentVariables","text":"<p>A map of environment variables used by the process</p> <pre><code>val environmentVariables: List&lt;String&gt; = currentProcess.environmentVariables\n\nprintln(environmentVariables) \n// e.g. {\"PATH\"=\"/usr/bin:/bin\", \"JAVA_HOME\"=\"/usr/lib/jvm/java-17-openjdk\"}\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#currentworkingdirectory","title":"currentWorkingDirectory","text":"<p>The current working directory of the process</p> <pre><code>val currentWorkingDirectory: String = currentProcess.currentWorkingDirectory\n\nprintln(currentWorkingDirectory) // e.g. /home/user/app\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#user","title":"user","text":"<p>The user running the process</p> <pre><code>val user: String = currentProcess.user\n\nprintln(user) // e.g. user\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#userid","title":"userId","text":"<p>The ID of the user running the process</p> <pre><code>val userId: String = currentProcess.userId\n\nprintln(userId) // e.g. 1000\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#group","title":"group","text":"<p>The group associated with the process</p> <pre><code>val group: String = currentProcess.group\n\nprintln(group) // e.g. users\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#groupid","title":"groupId","text":"<p>The ID of the group associated with the process</p> <pre><code>val groupId: String = currentProcess.groupId\n\nprintln(groupId) // e.g. 1000\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#state","title":"state","text":"<p>The state of the process (e.g., running, sleeping)</p>"},{"location":"desktop/operatingsystem/os_process/#state-entries","title":"State entries","text":"State Description NEW Intermediate state in process creation RUNNING Actively executing process SLEEPING Interruptible sleep state WAITING Blocked, uninterruptible sleep state ZOMBIE Intermediate state in process termination STOPPED Stopped by the user, such as for debugging OTHER Other or unknown states not defined INVALID The state resulting if the process fails to update statistics, probably due to termination SUSPENDED Special case of waiting if the process has been intentionally suspended (Windows only) <pre><code>val state: State = currentProcess.state\n\nprintln(state) // e.g. RUNNING\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#processid","title":"processId","text":"<p>The unique identifier for the process</p> <pre><code>val processId: Int = currentProcess.processId\n\nprintln(processId) // e.g. 2345\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#parentprocessid","title":"parentProcessId","text":"<p>The process ID of the parent process</p> <pre><code>val parentProcessId: Int = currentProcess.parentProcessId\n\nprintln(parentProcessId) // e.g. 1\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#threadcount","title":"threadCount","text":"<p>The number of threads in the process</p> <pre><code>val threadCount: Int = currentProcess.threadCount\n\nprintln(threadCount) // e.g. 24\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#priority","title":"priority","text":"<p>The priority of the process</p> <pre><code>val priority: Int = currentProcess.priority\n\nprintln(priority) // e.g. 10\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#virtualsize","title":"virtualSize","text":"<p>The virtual memory size of the process, in bytes</p> <pre><code>val virtualSize: Long = currentProcess.virtualSize\n\nprintln(virtualSize) // e.g. 512000000\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#residentsetsize","title":"residentSetSize","text":"<p>The resident set size of the process, in bytes (physical memory used)</p> <pre><code>val residentSetSize: Long = currentProcess.residentSetSize\n\nprintln(residentSetSize) // e.g. 128000000\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#kerneltime","title":"kernelTime","text":"<p>The amount of time the process has spent in kernel mode, in milliseconds</p> <pre><code>val kernelTime: Long = currentProcess.kernelTime\n\nprintln(kernelTime) // e.g. 4500\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#usertime","title":"userTime","text":"<p>The amount of time the process has spent in user mode, in milliseconds</p> <pre><code>val userTime: Long = currentProcess.userTime\n\nprintln(userTime) // e.g. 18200\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#starttime","title":"startTime","text":"<p>The time when the process started, in milliseconds since the Unix epoch</p> <pre><code>val startTime: Long = currentProcess.startTime\n\nprintln(startTime) // e.g. 1728903000000\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#bytesread","title":"bytesRead","text":"<p>The number of bytes read by the process</p> <pre><code>val bytesRead: Long = currentProcess.bytesRead\n\nprintln(bytesRead) // e.g. 10485760\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#byteswritten","title":"bytesWritten","text":"<p>The number of bytes written by the process</p> <pre><code>val bytesWritten: Long = currentProcess.bytesWritten\n\nprintln(bytesWritten) // e.g. 5242880\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#openfiles","title":"openFiles","text":"<p>The number of open files used by the process</p> <pre><code>val openFiles: Long = currentProcess.openFiles\n\nprintln(openFiles) // e.g. 48\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#softopenfilelimit","title":"softOpenFileLimit","text":"<p>The soft limit on the number of files the process can open</p> <pre><code>val softOpenFileLimit: Long = currentProcess.softOpenFileLimit\n\nprintln(softOpenFileLimit) // e.g. 1024\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#hardopenfilelimit","title":"hardOpenFileLimit","text":"<p>The hard limit on the number of files the process can open</p> <pre><code>val hardOpenFileLimit: Long = currentProcess.hardOpenFileLimit\n\nprintln(hardOpenFileLimit) // e.g. 4096\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#processcpuloadcumulative","title":"processCpuLoadCumulative","text":"<p>The cumulative CPU load of the process as a percentage</p> <pre><code>val processCpuLoadCumulative: Long = currentProcess.processCpuLoadCumulative\n\nprintln(processCpuLoadCumulative) // e.g. 12.7\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#processcpuloadbetweenticks","title":"processCpuLoadBetweenTicks","text":"<p>The CPU load of the process between two ticks, as a percentage</p> <pre><code>val processCpuLoadBetweenTicks: Long = currentProcess.processCpuLoadBetweenTicks\n\nprintln(processCpuLoadBetweenTicks) // e.g. 8.4\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#bitness","title":"bitness","text":"<p>The bitness of the process (e.g., 32-bit, 64-bit)</p> <pre><code>val bitness: Int = currentProcess.bitness\n\nprintln(bitness) // e.g. 64\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#affinitymask","title":"affinityMask","text":"<p>The CPU affinity mask for the process</p> <pre><code>val affinityMask: Long = currentProcess.affinityMask\n\nprintln(affinityMask) // e.g. 255\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#updateattributes","title":"updateAttributes","text":"<p>A flag indicating whether the process attributes should be updated</p> <pre><code>val updateAttributes: Boolean = currentProcess.updateAttributes\n\nprintln(updateAttributes) // e.g. 255\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#threaddetails","title":"threadDetails","text":"<p>The list of thread associated with the process</p> <pre><code>val threadDetails: List&lt;OSThread&gt; = currentProcess.threadDetails\n\nprintln(threadDetails)\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#minorfaults","title":"minorFaults","text":"<p>The number of minor page faults for the process</p> <pre><code>val minorFaults: Long = currentProcess.minorFaults\n\nprintln(minorFaults) // e.g. 3400\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#majorfaults","title":"majorFaults","text":"<p>The number of major page faults for the process</p> <pre><code>val majorFaults: Long = currentProcess.majorFaults\n\nprintln(majorFaults) // e.g. 28\n</code></pre>"},{"location":"desktop/operatingsystem/os_process/#contextswitches","title":"contextSwitches","text":"<p>The number of context switches for the process</p> <pre><code>val contextSwitches: Long = currentProcess.contextSwitches\n\nprintln(contextSwitches) // e.g. 17500\n</code></pre>"},{"location":"desktop/operatingsystem/os_service/","title":"OS service","text":"<p>Represents an operating system service</p>"},{"location":"desktop/operatingsystem/os_service/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/os_service/#name","title":"name","text":"<p>The name of the service</p> <pre><code>val services = operatingSystem.services\nval sample: OSService = services.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. nginx\n</code></pre>"},{"location":"desktop/operatingsystem/os_service/#processid","title":"processID","text":"<p>The process ID associated with the service</p> <pre><code>val services = operatingSystem.services\nval sample: OSService = services.first()\n\nval processID: Int = sample.processID\n\nprintln(processID) // e.g. 2156\n</code></pre>"},{"location":"desktop/operatingsystem/os_service/#state","title":"state","text":"<p>The current state of the service</p>"},{"location":"desktop/operatingsystem/os_service/#servicestate","title":"ServiceState","text":"state Description RUNNING The service is currently running STOPPED The service is currently stopped OTHER The service is in an unknown or other state <pre><code>val services = operatingSystem.services\nval sample: OSService = services.first()\n\nval state: ServiceState = sample.state\n\nprintln(state) // e.g. RUNNING\n</code></pre>"},{"location":"desktop/operatingsystem/os_session/","title":"OS session","text":"<p>Represents a user session in the operating system, providing information about the session, including the user, terminal device, login time, and host related to the session</p>"},{"location":"desktop/operatingsystem/os_session/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/os_session/#username","title":"userName","text":"<p>The username of the user in the session</p> <pre><code>val sessions = operatingSystem.services\nval sample: OSSession = sessions.first()\n\nval userName: String = sample.name\n\nprintln(userName) // e.g. user\n</code></pre>"},{"location":"desktop/operatingsystem/os_session/#terminaldevice","title":"terminalDevice","text":"<p>The terminal device associated with the session</p> <pre><code>val sessions = operatingSystem.services\nval sample: OSSession = sessions.first()\n\nval terminalDevice: String = sample.terminalDevice\n\nprintln(terminalDevice) // e.g. /dev/pts/0\n</code></pre>"},{"location":"desktop/operatingsystem/os_session/#logintime","title":"loginTime","text":"<p>The login time of the user session, represented as a timestamp in milliseconds</p> <pre><code>val sessions = operatingSystem.services\nval sample: OSSession = sessions.first()\n\nval loginTime: Long = sample.loginTime\n\nprintln(loginTime) // e.g. 1728903000000\n</code></pre>"},{"location":"desktop/operatingsystem/os_session/#host","title":"host","text":"<p>The host name or IP address of the system where the session is active</p> <pre><code>val sessions = operatingSystem.services\nval sample: OSSession = sessions.first()\n\nval host: String = sample.host\n\nprintln(host) // e.g. 192.168.1.10\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/","title":"OS thread","text":"<p>Represents a thread of an operating system process, providing details about its  execution, resource usage, and associated metadata</p>"},{"location":"desktop/operatingsystem/os_thread/#original-source","title":"Original source","text":"<p>The thread information are retrieved from <code>OperatingSystem.OSThread</code> interface</p>"},{"location":"desktop/operatingsystem/os_thread/#kinfos-source","title":"KInfo's source","text":"<pre><code>val currentThread = operatingSystem.currentThread\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/os_thread/#threadid","title":"threadId","text":"<p>The unique identifier for the thread</p> <pre><code>val threadId: Int = currentThread.threadId\n\nprintln(threadId) // e.g. 1024\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#name","title":"name","text":"<p>The name of the thread (e.g., \"main\", \"worker\")</p> <pre><code>val name: Int = currentThread.name\n\nprintln(name) // e.g. main\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#state","title":"state","text":"<p>The current state of the thread (e.g., running, sleeping)</p> <pre><code>val state: State = currentThread.state\n\nprintln(state) // e.g. RUNNING\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#threadcpuloadcumulative","title":"threadCpuLoadCumulative","text":"<p>The cumulative CPU load of the thread as a percentage</p> <pre><code>val threadCpuLoadCumulative: Double = currentThread.threadCpuLoadCumulative\n\nprintln(threadCpuLoadCumulative) // e.g. 3.8\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#threadcpuloadbetweenticks","title":"threadCpuLoadBetweenTicks","text":"<p>The CPU load of the thread between two ticks, as a percentage</p> <pre><code>val threadCpuLoadBetweenTicks: Double = currentThread.threadCpuLoadBetweenTicks\n\nprintln(threadCpuLoadBetweenTicks) // e.g. 1.2\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#owningprocessid","title":"owningProcessId","text":"<p>The process ID of the process that owns the thread</p> <pre><code>val owningProcessId: Int = currentThread.owningProcessId\n\nprintln(owningProcessId) // e.g. 2345\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#startmemoryaddress","title":"startMemoryAddress","text":"<p>The starting memory address of the thread</p> <pre><code>val startMemoryAddress: Long = currentThread.startMemoryAddress\n\nprintln(startMemoryAddress) // e.g. 140737488355328\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#contextswitches","title":"contextSwitches","text":"<p>The number of context switches performed for the thread</p> <pre><code>val contextSwitches: Long = currentThread.contextSwitches\n\nprintln(contextSwitches) // e.g. 820\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#minorfaults","title":"minorFaults","text":"<p>The number of minor page faults experienced by the thread</p> <pre><code>val minorFaults: Long = currentThread.minorFaults\n\nprintln(minorFaults) // e.g. 240\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#majorfaults","title":"majorFaults","text":"<p>The number of major page faults experienced by the thread</p> <pre><code>val majorFaults: Long = currentThread.majorFaults\n\nprintln(majorFaults) // e.g. 4\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#kerneltime","title":"kernelTime","text":"<p>The total amount of time the thread has spent in kernel mode, in milliseconds</p> <pre><code>val kernelTime: Long = currentThread.kernelTime\n\nprintln(kernelTime) // e.g. 120\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#usertime","title":"userTime","text":"<p>The total amount of time the thread has spent in user mode, in milliseconds</p> <pre><code>val userTime: Long = currentThread.userTime\n\nprintln(userTime) // e.g. 980\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#uptime","title":"upTime","text":"<p>The total uptime of the thread, in milliseconds</p> <pre><code>val upTime: Long = currentThread.upTime\n\nprintln(upTime) // e.g. 86400000\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#starttime","title":"startTime","text":"<p>The start time of the thread, in milliseconds since the Unix epoch</p> <pre><code>val startTime: Long = currentThread.startTime\n\nprintln(startTime) // e.g. 1728903000000\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#priority","title":"priority","text":"<p>The priority level of the thread</p> <pre><code>val priority: Int = currentThread.priority\n\nprintln(priority) // e.g. 8\n</code></pre>"},{"location":"desktop/operatingsystem/os_thread/#updateattributes","title":"updateAttributes","text":"<p>A flag indicating whether the thread attributes should be updated</p> <pre><code>val updateAttributes: Boolean = currentThread.updateAttributes\n\nprintln(updateAttributes) // true or false\n</code></pre>"},{"location":"desktop/operatingsystem/os_version_info/","title":"OS version info","text":"<p>The information refer to the operating system version</p>"},{"location":"desktop/operatingsystem/os_version_info/#original-source","title":"Original source","text":"<p>The operating system version information are retrieved from <code>OperatingSystem.OSVersionInfo</code> interface</p>"},{"location":"desktop/operatingsystem/os_version_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val osVersionInfo = operatingSystem.versionInfo\n</code></pre>"},{"location":"desktop/operatingsystem/os_version_info/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/os_version_info/#version","title":"version","text":"<p>The version of the operating system</p> <pre><code>val version: String = osVersionInfo.version\n\nprintln(version) // e.g. 11\n</code></pre>"},{"location":"desktop/operatingsystem/os_version_info/#codename","title":"codeName","text":"<p>The code name of the operating system version</p> <pre><code>val codeName: String = osVersionInfo.codeName\n\nprintln(codeName) // e.g. Home\n</code></pre>"},{"location":"desktop/operatingsystem/os_version_info/#buildnumber","title":"buildNumber","text":"<p>The build number of the operating system</p> <pre><code>val buildNumber: String = osVersionInfo.buildNumber\n\nprintln(buildNumber) // e.g. 00000\n</code></pre>"},{"location":"desktop/operatingsystem/tcp_state/","title":"TCP state","text":"<p>Represents the different states of a TCP connection.</p> <p>This enum defines the possible states a TCP connection can be in during its lifecycle, from establishing a connection to closing or being in a waiting state</p>"},{"location":"desktop/operatingsystem/tcp_state/#entries","title":"Entries","text":"State Description UNKNOWN Represents an unknown state of the TCP connection CLOSED Represents a closed TCP connection, either because it was closed normally or due to an error LISTEN Represents a TCP socket that is listening for incoming connection requests SYN_SENT Represents the state where a TCP client has sent a SYN message to initiate a connection SYN_RECV Represents the state where a TCP server has received a SYN message and is waiting to establish a connection ESTABLISHED Represents the state where the TCP connection has been successfully established and data can be transmitted FIN_WAIT_1 Represents the state where the connection is being closed, and a FIN message has been sent to the other side FIN_WAIT_2 Represents the state where the connection is being closed, and the peer has acknowledged the FIN message CLOSE_WAIT Represents the state where the local TCP stack has received a FIN from the peer and is waiting to close the connection CLOSING Represents the state where both sides are trying to close the connection simultaneously LAST_ACK Represents the state where the local TCP stack has sent a FIN and is waiting for the final acknowledgment from the peer TIME_WAIT Represents the state where the connection is waiting for a timeout to ensure the remote side has received the final acknowledgment NONE Represents the absence of a valid TCP state, typically used as a placeholder <p>These entries are according to the RFC 793 document</p>"},{"location":"desktop/operatingsystem/filesystem/file_store/","title":"File store","text":"<p>Represents a file store (such as a disk or mount point) in the operating system,  providing information about the file system, including the volume, space usage, and attributes related to the file store</p>"},{"location":"desktop/operatingsystem/filesystem/file_store/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/filesystem/file_store/#name","title":"name","text":"<p>The name of the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval name: String = sample.name\n\nprintln(name) // e.g. Local Disk (C:)\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#volume","title":"volume","text":"<p>The volume identifier for the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval volume: String = sample.volume\n\nprintln(volume) // e.g. C:\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#label","title":"label","text":"<p>The label assigned to the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval label: String = sample.label\n\nprintln(label) // e.g. os\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#logicalvolume","title":"logicalVolume","text":"<p>The logical volume associated with the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval logicalVolume: String = sample.logicalVolume\n\nprintln(logicalVolume) // e.g. /dev/sda1\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#mount","title":"mount","text":"<p>The mount point of the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval mount: String = sample.mount\n\nprintln(mount) // e.g. F:\\\\\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#description","title":"description","text":"<p>A description of the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval description: String = sample.description\n\nprintln(description) // e.g. Fixed drive\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#type","title":"type","text":"<p>The type of the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval type: String = sample.type\n\nprintln(type) // e.g. NTFS\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#options","title":"options","text":"<p>The options associated with the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval options: String = sample.options\n\nprintln(options) // e.g. rw,compress\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#uuid","title":"uuid","text":"<p>The unique identifier for the file store</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval uuid: String = sample.uuid\n\nprintln(uuid) // e.g. 123e4567-e89b-12d3-a456-426614174000\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#freespace","title":"freeSpace","text":"<p>The amount of free space in bytes</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval freeSpace: Long = sample.freeSpace\n\nprintln(freeSpace) // e.g. 150000000000\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#usablespace","title":"usableSpace","text":"<p>The usable space in bytes</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval usableSpace: Long = sample.usableSpace\n\nprintln(usableSpace) // e.g. 145000000000\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#usablespace_1","title":"usableSpace","text":"<p>The total space in bytes</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval totalSpace: Long = sample.totalSpace\n\nprintln(totalSpace) // e.g. 500000000000\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#freeinodes","title":"freeInodes","text":"<p>The number of free inodes</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval freeInodes: Long = sample.freeInodes\n\nprintln(freeInodes) // e.g. 8000000\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#totalinodes","title":"totalInodes","text":"<p>The total number of inodes</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval totalInodes: Long = sample.totalInodes\n\nprintln(totalInodes) // e.g. 10000000\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_store/#updateattributes","title":"updateAttributes","text":"<p>Whether the file store supports updating attributes</p> <pre><code>val fileStores = fileSystem.fileStores\nval sample: FileStore = fileStores.first()\n\nval updateAttributes: Boolean = sample.updateAttributes\n\nprintln(updateAttributes) // true or false\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_system/","title":"File System","text":"<p>The information refer to the file system of the device</p>"},{"location":"desktop/operatingsystem/filesystem/file_system/#original-source","title":"Original source","text":"<p>The file system information are retrieved from <code>OperatingSystem.FileSystem</code> interface</p>"},{"location":"desktop/operatingsystem/filesystem/file_system/#kinfos-source","title":"KInfo's source","text":"<pre><code>val fileSystem = operatingSystem.fileSystem\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_system/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/filesystem/file_system/#filestores","title":"fileStores","text":"<p>List of file stores available in the system</p> <pre><code>val fileStores: List&lt;OSFileStore&gt; = fileSystem.fileStores\n\nprintln(fileStores)\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_system/#openfiledescriptors","title":"openFileDescriptors","text":"<p>The current number of open file descriptors for the system. This is the number of files currently opened by processes</p> <pre><code>val openFileDescriptors: Long = fileSystem.openFileDescriptors\n\nprintln(openFileDescriptors) // e.g. 1200\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_system/#maxfiledescriptors","title":"maxFileDescriptors","text":"<p>The maximum number of file descriptors available for the entire system. This is the upper limit of file descriptors the system can handle at once</p> <pre><code>val maxFileDescriptors: Long = fileSystem.maxFileDescriptors\n\nprintln(maxFileDescriptors) // e.g. 16777216\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_system/#maxfiledescriptorsperprocess","title":"maxFileDescriptorsPerProcess","text":"<p>The maximum number of file descriptors available per process. This is the upper limit of file descriptors a single process can handle at once</p> <pre><code>val maxFileDescriptorsPerProcess: Long = fileSystem.maxFileDescriptorsPerProcess\n\nprintln(maxFileDescriptorsPerProcess) // e.g. 8192\n</code></pre>"},{"location":"desktop/operatingsystem/filesystem/file_system/#methods","title":"Methods","text":""},{"location":"desktop/operatingsystem/filesystem/file_system/#getfilestores","title":"getFileStores","text":"<p>Method used to retrieve the file stores of the system</p>"},{"location":"desktop/operatingsystem/filesystem/file_system/#parameters","title":"Parameters","text":"<ul> <li>localOnly <code>:Boolean</code> - A flag to indicate whether to return only local file stores (<code>true</code>) or all file stores (<code>false</code>)</li> </ul>"},{"location":"desktop/operatingsystem/filesystem/file_system/#interfaces","title":"Interfaces","text":"<ul> <li>OSFileStore - Represents a file store (such as a disk or mount point) in the operating system</li> </ul> <pre><code>val fileStores: List&lt;OSFileStore&gt; = fileSystem.getFileStores(\n    localOnly = // true or false\n)\n\nprintln(fileStores)\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/","title":"Internal Protocol Stats","text":"<p>Represent the statistics of the network protocol including TCP and UDP statistics for both IPv4 and IPv6, as well as the list of active IP connections</p>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#original-source","title":"Original source","text":"<p>The internet protocol stats information are retrieved from <code>OperatingSystem.InternetProtocolStats</code> interface</p>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#kinfos-source","title":"KInfo's source","text":"<pre><code>val internetProtocolStats = operatingSystem.internetProtocolStats\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#tcpv4stats","title":"tcpV4Stats","text":"<p>The TCP statistics for IPv4 protocol, including information about connections, retransmissions, etc.</p> <p>The <code>tcpV4Stats</code> property is represented by the TcpStats interface</p> <pre><code>val tcpV4Stats: TcpStats = internetProtocolStats.tcpV4Stats\n\nprintln(tcpV4Stats.connectionsEstablished) // e.g. 1000\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#tcpv6stats","title":"tcpV6Stats","text":"<p>The TCP statistics for IPv6 protocol, including information about connections, retransmissions, etc.</p> <p>The <code>tcpV6Stats</code> property is represented by the TcpStats interface</p> <pre><code>val tcpV6Stats: TcpStats = internetProtocolStats.tcpV6Stats\n\nprintln(tcpV6Stats.connectionsEstablished) // e.g. 1000\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#udpv4stats","title":"udpV4Stats","text":"<p>The UDP statistics for IPv4 protocol, including information about datagrams sent and received, etc</p> <p>The <code>udpV4Stats</code> property is represented by the UdpStats interface</p> <pre><code>val udpV4Stats: UdpStats = internetProtocolStats.udpV4Stats\n\nprintln(udpV4Stats.datagramsSent) // e.g. 452300\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#udpv6stats","title":"udpV6Stats","text":"<p>The UDP statistics for IPv6 protocol, including information about datagrams sent and received, etc</p> <p>The <code>udpV6Stats</code> property is represented by the UdpStats interface</p> <pre><code>val udpV6Stats: UdpStats = internetProtocolStats.udpV6Stats\n\nprintln(udpV6Stats.datagramsSent) // e.g. 452300\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/internet_protocol_stats/#ipconnections","title":"ipConnections","text":"<p>List of active IP connections, each representing a current network connection with its details</p> <pre><code>val ipConnections: List&lt;IPConnection&gt; = internetProtocolStats.ipConnections\n\nprintln(ipConnections)\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/","title":"IP connection","text":"<p>Represents an active IP connection, providing details about the connection's state, local and foreign addresses, ports, and associated process information</p>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#type","title":"type","text":"<p>The type of the connection</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval type: String = sample.type\n\nprintln(type) // e.g. TCP\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#localaddress","title":"localAddress","text":"<p>The local IP address of the connection as a byte array</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval localAddress: ByteArray = sample.localAddress\n\nprintln(localAddress) // e.g. [192, 168, 1, 10]\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#localport","title":"localPort","text":"<p>The local port number of the connection</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval localPort: Int = sample.localPort\n\nprintln(localPort) // e.g. 52345\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#foreignport","title":"foreignPort","text":"<p>The foreign port number (remote) of the connection</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval foreignPort: Int = sample.foreignPort\n\nprintln(foreignPort) // e.g. 443\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#state","title":"state","text":"<p>The current state of the connection</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval state: TcpState = sample.state\n\nprintln(state) // e.g. ESTABLISHED\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#transmitqueue","title":"transmitQueue","text":"<p>The length of the transmit queue for the connection</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval transmitQueue: Int = sample.transmitQueue\n\nprintln(transmitQueue) // e.g. 0\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#receivequeue","title":"receiveQueue","text":"<p>The length of the receipt queue for the connection</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval receiveQueue: Int = sample.receiveQueue\n\nprintln(receiveQueue) // e.g. 128\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/ip_connection/#owningprocessid","title":"owningProcessId","text":"<p>The process ID of the process that owns the connection</p> <pre><code>val ipConnections = internetProtocolStats.ipConnections\nval sample: IPConnection = ipConnections.first()\n\nval owningProcessId: Int = sample.owningProcessId\n\nprintln(owningProcessId) // e.g. 2156\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/","title":"TCP stats","text":"<p>Represents statistics related to TCP connections, including the number of connections, the segments sent and received, and error counts</p>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#connectionsestablished","title":"connectionsEstablished","text":"<p>The number of established TCP connections</p> <pre><code>val connectionsEstablished: Long = statsSample.connectionsEstablished\n\nprintln(connectionsEstablished) // e.g. 1824\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#connectionsactive","title":"connectionsActive","text":"<p>The number of active (currently open) TCP connections</p> <pre><code>val connectionsActive: Long = statsSample.connectionsActive\n\nprintln(connectionsActive) // e.g. 320\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#connectionspassive","title":"connectionsPassive","text":"<p>The number of passive (waiting for incoming requests) TCP connections</p> <pre><code>val connectionsPassive: Long = statsSample.connectionsPassive\n\nprintln(connectionsPassive) // e.g. 95\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#connectionfailures","title":"connectionFailures","text":"<p>The number of failed attempts to establish a TCP connection</p> <pre><code>val connectionFailures: Long = statsSample.connectionFailures\n\nprintln(connectionFailures) // e.g. 14\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#connectionsreset","title":"connectionsReset","text":"<p>The number of TCP connections that have been reset</p> <pre><code>val connectionsReset: Long = statsSample.connectionsReset\n\nprintln(connectionsReset) // e.g. 37\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#segmentssent","title":"segmentsSent","text":"<p>The number of TCP segments sent</p> <pre><code>val segmentsSent: Long = statsSample.segmentsSent\n\nprintln(segmentsSent) // e.g. 15824300\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#segmentsreceived","title":"segmentsReceived","text":"<p>The number of TCP segments received</p> <pre><code>val segmentsReceived: Long = statsSample.segmentsReceived\n\nprintln(segmentsReceived) // e.g. 17345210\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#segmentsretransmitted","title":"segmentsRetransmitted","text":"<p>The number of TCP segments that have been retransmitted</p> <pre><code>val segmentsRetransmitted: Long = statsSample.segmentsRetransmitted\n\nprintln(segmentsRetransmitted) // e.g. 1250\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#inerrors","title":"inErrors","text":"<p>The number of incoming errors (e.g., malformed packets)</p> <pre><code>val inErrors: Long = statsSample.inErrors\n\nprintln(inErrors) // e.g. 42\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/tcp_stats/#outresets","title":"outResets","text":"<p>The number of outgoing reset signals (e.g., RST flags)</p> <pre><code>val outResets: Long = statsSample.outResets\n\nprintln(outResets) // e.g. 37\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/udp_stats/","title":"UDP stats","text":"<p>Represents the statistics for the <code>UDP</code> protocol, including the number of datagrams sent and received, as well as any errors or datagrams with no port</p>"},{"location":"desktop/operatingsystem/internetprotocolstats/udp_stats/#properties","title":"Properties","text":""},{"location":"desktop/operatingsystem/internetprotocolstats/udp_stats/#datagramssent","title":"datagramsSent","text":"<p>The total number of UDP datagrams sent</p> <pre><code>val datagramsSent: Long = statsSample.datagramsSent\n\nprintln(datagramsSent) // e.g. 452300\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/udp_stats/#datagramsreceived","title":"datagramsReceived","text":"<p>The total number of UDP datagrams received</p> <pre><code>val datagramsReceived: Long = statsSample.datagramsReceived\n\nprintln(datagramsReceived) // e.g. 439800\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/udp_stats/#datagramsnoport","title":"datagramsNoPort","text":"<p>The total number of UDP datagrams that did not have a corresponding port to route to</p> <pre><code>val datagramsNoPort: Long = statsSample.datagramsNoPort\n\nprintln(datagramsNoPort) // e.g. 120\n</code></pre>"},{"location":"desktop/operatingsystem/internetprotocolstats/udp_stats/#datagramsnoport_1","title":"datagramsNoPort","text":"<p>The total number of UDP datagrams that were received with errors (e.g., checksum errors)</p> <pre><code>val datagramsReceivedErrors: Long = statsSample.datagramsReceivedErrors\n\nprintln(datagramsReceivedErrors) // e.g. 8\n</code></pre>"},{"location":"ios/","title":"Overview","text":""},{"location":"ios/#available-information","title":"Available information","text":"<p>On iOS target are available the below information:</p> Category Property Description Source App Info <code>appName</code> The name of the application <code>NSBundle.mainBundle.infoDictionary</code> <code>bundleId</code> The unique identifier for the app bundle <code>NSBundle.mainBundle.bundleIdentifier</code> <code>appVersion</code> The version of the app <code>NSBundle.mainBundle.infoDictionary</code> <code>appShortVersion</code> The short version of the app <code>NSBundle.mainBundle.infoDictionary</code> <code>isDebug</code> Indicates whether the app is running in debug mode <code>Platform.isDebugBinary</code> Device Info <code>name</code> The name of the current device <code>UIDevice.currentDevice.name</code> <code>systemName</code> The name of the iOS operating system <code>UIDevice.currentDevice.systemName</code> <code>systemVersion</code> The version of the iOS operating system <code>UIDevice.currentDevice.systemVersion</code> <code>model</code> The model identifier of the current device <code>UIDevice.currentDevice.model</code> <code>localizedModel</code> The localized model name of the current device <code>UIDevice.currentDevice.localizedModel</code> <code>identifierForVendor</code> The unique identifier for the vendor associated with the app <code>UIDevice.currentDevice.identifierForVendor.UUIDString</code> <code>isPhysicalDevice</code> Indicates whether the current device is physical or a simulator <code>NSProcessInfo.processInfo.environment</code> <code>isMultitaskingSupported</code> Indicates whether the current iOS device supports multitasking <code>UIDevice.currentDevice.isMultitaskingSupported()</code> <code>isGeneratingDeviceOrientationNotifications</code> Indicates whether the current device is generating notifications for orientation changes <code>UIDevice.currentDevice.isGeneratingDeviceOrientationNotifications()</code> <code>deviceOrientation</code> Current orientation of the device <code>IosDeviceOrientationImpl</code> Locale Info <code>locale</code> Represents the current language and region of the device <code>NSLocale.currentLocale</code>"},{"location":"ios/#api-source","title":"API source","text":"<p>The information are retrievable using the <code>IosInfo</code> API:</p>"},{"location":"ios/#composable-context","title":"Composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside composable context</p> <pre><code>val kInfoState = rememberKInfoState()\n</code></pre>"},{"location":"ios/#non-composable-context","title":"Non-composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside non-composable context</p> <pre><code>val kInfoState = KInfoState()\n</code></pre>"},{"location":"ios/#iosinfo","title":"IosInfo","text":"<p>Retrieve a <code>IosInfo</code> instance from <code>kInfoState</code> instance</p> <pre><code>val iosInfo = kInfoState.iosInfo \n</code></pre> <p>Warning</p> <p>You can directly retrieve <code>iosInfo</code> just inside the <code>iosMain</code> module, in the <code>commonMain</code> module you have to use the common usage instead, or the application will crash</p>"},{"location":"ios/app_info/","title":"App info","text":"<p>The application information refers to the details of the application in which <code>KInfo</code> is currently used</p>"},{"location":"ios/app_info/#appname","title":"appName","text":"<p>The name of the application</p>"},{"location":"ios/app_info/#original-source","title":"Original source","text":"<p>The application name is retrieved from <code>NSBundle.mainBundle.infoDictionary.CFBundleDisplayName</code> or <code>NSBundle.mainBundle.infoDictionary.CFBundleName</code> property</p>"},{"location":"ios/app_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val appName: String = iosInfo.appName\n\nprintln(appName) // e.g. KInfoDemo\n</code></pre>"},{"location":"ios/app_info/#bundleid","title":"bundleId","text":"<p>The unique identifier for the app bundle</p>"},{"location":"ios/app_info/#original-source_1","title":"Original source","text":"<p>The unique identifier is retrieved from <code>NSBundle.mainBundle.bundleIdentifier</code> property</p>"},{"location":"ios/app_info/#kinfos-source_1","title":"KInfo's source","text":"<pre><code>val bundleId: String = iosInfo.bundleId\n\nprintln(bundleId) // e.g. com.example.myapp\n</code></pre>"},{"location":"ios/app_info/#appversion","title":"appVersion","text":"<p>The version of the app</p>"},{"location":"ios/app_info/#original-source_2","title":"Original source","text":"<p>The version of the app is retrieved from <code>NSBundle.mainBundle.infoDictionary.CFBundleVersion</code> property</p>"},{"location":"ios/app_info/#kinfos-source_2","title":"KInfo's source","text":"<pre><code>val appVersion: String = iosInfo.appVersion\n\nprintln(appVersion) // e.g. 1.0.0\n</code></pre>"},{"location":"ios/app_info/#appshortversion","title":"appShortVersion","text":"<p>The short version of the app</p>"},{"location":"ios/app_info/#original-source_3","title":"Original source","text":"<p>The short version of the app is retrieved from <code>NSBundle.mainBundle.infoDictionary.CFBundleShortVersionString</code> property</p>"},{"location":"ios/app_info/#kinfos-source_3","title":"KInfo's source","text":"<pre><code>val appShortVersion: String = iosInfo.appShortVersion\n\nprintln(appShortVersion) // e.g. 1.0\n</code></pre>"},{"location":"ios/app_info/#isdebug","title":"isDebug","text":"<p>Indicates whether the app is running in debug mode</p>"},{"location":"ios/app_info/#original-source_4","title":"Original source","text":"<p>The value is retrieved from <code>Platform.isDebugBinary</code> property</p>"},{"location":"ios/app_info/#kinfos-source_4","title":"KInfo's source","text":"<pre><code>val isDebug: Boolean = iosInfo.isDebug\n\nprintln(isDebug) // true or false\n</code></pre>"},{"location":"ios/device_info/","title":"Device info","text":"<p>The device information refers to the details of the device on which the application using KInfo is currently running</p>"},{"location":"ios/device_info/#name","title":"name","text":"<p>The name of the current device</p>"},{"location":"ios/device_info/#original-source","title":"Original source","text":"<p>The name of the device is retrieved from <code>UIDevice.currentDevice.name</code> property</p>"},{"location":"ios/device_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val name: String = iosInfo.name\n\nprintln(name) // e.g. iPhone 12\n</code></pre>"},{"location":"ios/device_info/#systemname","title":"systemName","text":"<p>The name of the iOS operating system</p>"},{"location":"ios/device_info/#original-source_1","title":"Original source","text":"<p>The name of the iOS is retrieved from <code>UIDevice.currentDevice.systemName</code> property</p>"},{"location":"ios/device_info/#kinfos-source_1","title":"KInfo's source","text":"<pre><code>val systemName: String = iosInfo.systemName\n\nprintln(systemName) // e.g. iOS\n</code></pre>"},{"location":"ios/device_info/#systemversion","title":"systemVersion","text":"<p>The version of the iOS operating system</p>"},{"location":"ios/device_info/#original-source_2","title":"Original source","text":"<p>The iOS version is retrieved from <code>UIDevice.currentDevice.systemVersion</code> property</p>"},{"location":"ios/device_info/#kinfos-source_2","title":"KInfo's source","text":"<pre><code>val systemVersion: String = iosInfo.systemVersion\n\nprintln(systemVersion) // e.g. 16\n</code></pre>"},{"location":"ios/device_info/#model","title":"model","text":"<p>The model identifier of the current device</p>"},{"location":"ios/device_info/#original-source_3","title":"Original source","text":"<p>The model identifier is retrieved from <code>UIDevice.currentDevice.model</code> property</p>"},{"location":"ios/device_info/#kinfos-source_3","title":"KInfo's source","text":"<pre><code>val model: String = iosInfo.model\n\nprintln(model) // e.g. iPhone12,1\n</code></pre>"},{"location":"ios/device_info/#localizedmodel","title":"localizedModel","text":"<p>The localized model name of the current device</p>"},{"location":"ios/device_info/#original-source_4","title":"Original source","text":"<p>The localized model name is retrieved from <code>UIDevice.currentDevice.localizedModel</code> property</p>"},{"location":"ios/device_info/#kinfos-source_4","title":"KInfo's source","text":"<pre><code>val localizedModel: String = iosInfo.localizedModel\n\nprintln(localizedModel) // e.g. iPhone\n</code></pre>"},{"location":"ios/device_info/#identifierforvendor","title":"identifierForVendor","text":"<p>The unique identifier for the vendor associated with the app</p>"},{"location":"ios/device_info/#original-source_5","title":"Original source","text":"<p>The identifier for the vendor is retrieved from <code>UIDevice.currentDevice.identifierForVendor.UUIDString</code> property</p>"},{"location":"ios/device_info/#kinfos-source_5","title":"KInfo's source","text":"<pre><code>val identifierForVendor: String = iosInfo.identifierForVendor\n\nprintln(identifierForVendor) // e.g. E123456789\n</code></pre>"},{"location":"ios/device_info/#isphysicaldevice","title":"isPhysicalDevice","text":"<p>Indicates whether the current device is physical or a simulator</p>"},{"location":"ios/device_info/#original-source_6","title":"Original source","text":"<p>The value is retrieved from <code>NSProcessInfo.processInfo.environment</code> property</p>"},{"location":"ios/device_info/#kinfos-source_6","title":"KInfo's source","text":"<pre><code>val isPhysicalDevice: Boolean = iosInfo.isPhysicalDevice\n\nprintln(isPhysicalDevice) // true or false\n</code></pre>"},{"location":"ios/device_info/#ismultitaskingsupported","title":"isMultitaskingSupported","text":"<p>Indicates whether the current iOS device supports multitasking</p>"},{"location":"ios/device_info/#original-source_7","title":"Original source","text":"<p>The value is retrieved from <code>UIDevice.currentDevice.isMultitaskingSupported()</code> method</p>"},{"location":"ios/device_info/#kinfos-source_7","title":"KInfo's source","text":"<pre><code>val isMultitaskingSupported: Boolean = iosInfo.isMultitaskingSupported\n\nprintln(isMultitaskingSupported) // true or false\n</code></pre>"},{"location":"ios/device_info/#isgeneratingdeviceorientationnotifications","title":"isGeneratingDeviceOrientationNotifications","text":"<p>Indicates whether the current device is generating notifications for orientation changes</p>"},{"location":"ios/device_info/#original-source_8","title":"Original source","text":"<p>The value is retrieved from <code>UIDevice.currentDevice.isGeneratingDeviceOrientationNotifications()</code> method</p>"},{"location":"ios/device_info/#kinfos-source_8","title":"KInfo's source","text":"<pre><code>val isGeneratingNotifications: Boolean = iosInfo.isGeneratingDeviceOrientationNotifications\n\nprintln(isGeneratingNotifications) // true or false\n</code></pre>"},{"location":"ios/device_info/#deviceorientation","title":"deviceOrientation","text":"<p>The current orientation of the device</p>"},{"location":"ios/device_info/#original-source_9","title":"Original source","text":"<p>The orientation value is retrieved from <code>IosDeviceOrientationImpl</code> property</p>"},{"location":"ios/device_info/#kinfos-source_9","title":"KInfo's source","text":"<pre><code>val deviceOrientation: DeviceOrientation = iosInfo.deviceOrientation\n</code></pre>"},{"location":"ios/device_info/#properties","title":"Properties","text":""},{"location":"ios/device_info/#isportrait","title":"isPortrait","text":"<p>Whether the device is currently in portrait mode</p> <pre><code>val isPortrait: Boolean = deviceOrientation.isPortrait\n\nprintln(isPortrait) // true or false\n</code></pre>"},{"location":"ios/device_info/#islandscape","title":"isLandscape","text":"<p>Whether the device is currently in landscape mode</p> <pre><code>val isLandscape: Boolean = deviceOrientation.isLandscape\n\nprintln(isLandscape) // true or false\n</code></pre>"},{"location":"ios/locale_info/","title":"Locale info","text":"<p>Information refer to the locale set on the device</p>"},{"location":"ios/locale_info/#locale","title":"locale","text":"<p>Represents the current language and region of the device</p>"},{"location":"ios/locale_info/#original-source","title":"Original source","text":"<p>The locale value is retrieved from <code>NSLocale.currentLocale</code> property</p>"},{"location":"ios/locale_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val locale: Locale = iosInfo.locale\n\nprintln(locale) // e.g. Locale(languageCode=it, region=IT)\n</code></pre>"},{"location":"web/","title":"Overview","text":"<p>The web platform works under the hood with the ua-parser-js library to retrieve the information, specially the UAParser information</p>"},{"location":"web/#available-information","title":"Available information","text":"<p>On web target are available the below information:</p> Category Property Description Source Browser Info <code>name</code> The name of the browser <code>UAParser.result.browser</code> <code>version</code> The version of the browser <code>UAParser.result.browser.version</code> <code>major</code> The major version number of the browser <code>UAParser.result.browser.major</code> <code>type</code> Type of current browser <code>UAParser.result.browser.type</code> OS Info <code>name</code> The name of the operating system <code>UAParser.result.os.name</code> <code>version</code> The version of the operating system <code>UAParser.result.os.version</code> Device Info <code>model</code> The model of the device <code>UAParser.result.device.model</code> <code>type</code> The type of the device <code>UAParser.result.device.type</code> <code>vendor</code> The vendor of the device <code>UAParser.result.device.vendor</code> CPU Info <code>architecture</code> The CPU architecture of the device <code>UAParser.result.cpu.architecture</code> Engine Info <code>name</code> The name of the browser engine <code>UAParser.result.engine.name</code> <code>version</code> The version of the engine <code>UAParser.result.engine.version</code> Web Info <code>userAgent</code> The user agent string representing the client's web browser and system <code>window.navigator.userAgent</code>"},{"location":"web/#api-source","title":"API source","text":"<p>The information are retrievable using the <code>WebInfo</code> API:</p>"},{"location":"web/#composable-context","title":"Composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside composable context</p> <pre><code>val kInfoState = rememberKInfoState()\n</code></pre>"},{"location":"web/#non-composable-context","title":"Non-composable context","text":"<p>Retrieve a <code>KInfoState</code> instance inside non-composable context</p> <pre><code>val kInfoState = KInfoState()\n</code></pre>"},{"location":"web/#webinfo","title":"WebInfo","text":"<p>Retrieve a <code>WebInfo</code> instance from <code>kInfoState</code> instance</p> <pre><code>val webInfo = kInfoState.webInfo \n</code></pre> <p>Warning</p> <p>You can directly retrieve <code>webInfo</code> just inside the <code>webMain</code> module, in the <code>commonMain</code> module you have to use the common usage instead, or the application will crash</p>"},{"location":"web/browser_info/","title":"Browser info","text":"<p>Information refer to the browser where the application is running</p>"},{"location":"web/browser_info/#original-source","title":"Original source","text":"<p>The browser information are retrieved from <code>UAParser.result.browser</code> interface</p>"},{"location":"web/browser_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val browser: Browser = webInfo.browser\n</code></pre>"},{"location":"web/browser_info/#properties","title":"Properties","text":""},{"location":"web/browser_info/#name","title":"name","text":"<p>The name of the browser  </p> <pre><code>val name: String = browser.name\n\nprintln(name) //e.g. Chrome\n</code></pre>"},{"location":"web/browser_info/#version","title":"version","text":"<p>The version of the browser</p> <pre><code>val version: String = browser.version\n\nprintln(version) //e.g. 91.0.4472.124\n</code></pre>"},{"location":"web/browser_info/#major","title":"major","text":"<p>The major version number of the browser</p> <pre><code>val major: String = browser.major\n\nprintln(major) //e.g. 91\n</code></pre>"},{"location":"web/browser_info/#type","title":"type","text":"<p>The type of current browser</p> <pre><code>val type: String = browser.type\n\nprintln(type) // (email, inapp, crawler)\n</code></pre>"},{"location":"web/cpu_info/","title":"Cpu info","text":"<p>The CPU information refers to the details of the CPU of the device</p>"},{"location":"web/cpu_info/#original-source","title":"Original source","text":"<p>The CPU information are retrieved from <code>UAParser.result.cpu</code> interface</p>"},{"location":"web/cpu_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val cpu: CPU = webInfo.cpu\n</code></pre>"},{"location":"web/cpu_info/#properties","title":"Properties","text":""},{"location":"web/cpu_info/#architecture","title":"architecture","text":"<p>The CPU architecture of the device</p> <pre><code>val architecture: String = cpu.architecture\n\nprintln(architecture) //e.g. x86\n</code></pre>"},{"location":"web/device_info/","title":"Device info","text":"<p>The device information refers to the details of the device on which the application using KInfo is currently running</p>"},{"location":"web/device_info/#original-source","title":"Original source","text":"<p>The device information are retrieved from <code>UAParser.result.device</code> interface</p>"},{"location":"web/device_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val device: Device = webInfo.device\n</code></pre>"},{"location":"web/device_info/#properties","title":"Properties","text":""},{"location":"web/device_info/#model","title":"model","text":"<p>The model of the device</p> <pre><code>val model: String = device.model\n\nprintln(model) //e.g. Xiaomi\n</code></pre>"},{"location":"web/device_info/#type","title":"type","text":"<p>The type of the device</p> <pre><code>val type: String = device.type\n\nprintln(type) //e.g. mobile\n</code></pre>"},{"location":"web/engine_info/","title":"Engine info","text":"<p>The engine information refers to the details of the engine of the browser where the application is running</p>"},{"location":"web/engine_info/#original-source","title":"Original source","text":"<p>The engine information are retrieved from <code>UAParser.result.engine</code> interface</p>"},{"location":"web/engine_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val engine: Engine = webInfo.engine\n</code></pre>"},{"location":"web/engine_info/#properties","title":"Properties","text":""},{"location":"web/engine_info/#name","title":"name","text":"<p>The name of the browser engine</p> <pre><code>val name: String = engine.name\n\nprintln(name) //e.g. Blink\n</code></pre>"},{"location":"web/engine_info/#version","title":"version","text":"<p>The version of the engine</p> <pre><code>val version: String = engine.version\n\nprintln(version) //e.g. 91.0\n</code></pre>"},{"location":"web/os_info/","title":"OS info","text":"<p>The OS information refers to the details of the operating system of the device on which the application using KInfo is currently running</p>"},{"location":"web/os_info/#original-source","title":"Original source","text":"<p>The operating system information are retrieved from <code>UAParser.result.os</code> property</p>"},{"location":"web/os_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val os: Os = webInfo.os\n</code></pre>"},{"location":"web/os_info/#properties","title":"Properties","text":""},{"location":"web/os_info/#name","title":"name","text":"<p>The name of the operating system</p> <pre><code>val name: String = os.name\n\nprintln(name) //e.g. Windows\n</code></pre>"},{"location":"web/os_info/#version","title":"version","text":"<p>The version of the operating system</p> <pre><code>val version: String = os.version\n\nprintln(version) //e.g. 10\n</code></pre>"},{"location":"web/web_info/","title":"Web info","text":"<p>The web information refers to those miscellaneous information provided by the browser</p>"},{"location":"web/web_info/#useragent","title":"userAgent","text":"<p>The user agent string representing the client's web browser and system</p>"},{"location":"web/web_info/#original-source","title":"Original source","text":"<p>The user agent is retrieved from <code>window.navigator.userAgent</code> property</p>"},{"location":"web/web_info/#kinfos-source","title":"KInfo's source","text":"<pre><code>val userAgent: String = webInfo.userAgent\n\nprintln(userAgent)\n// e.g. Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36\n</code></pre>"}]}