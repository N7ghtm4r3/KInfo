package com.tecknobit.kinfo.model.hardware

import com.tecknobit.kinfo.annotations.Bridge
import com.tecknobit.kinfo.model.desktop.hardware.*
import com.tecknobit.kinfo.model.desktop.hardware.centralprocessor.CentralProcessor
import com.tecknobit.kinfo.model.desktop.hardware.computersystem.ComputerSystem
import com.tecknobit.kinfo.model.desktop.hardware.memory.GlobalMemory
import com.tecknobit.kinfo.model.desktop.hardware.storage.HWDiskStore
import com.tecknobit.kinfo.model.desktop.hardware.storage.HWPartition
import com.tecknobit.kinfo.model.desktop.hardware.storage.LogicalVolumeGroup
import com.tecknobit.kinfo.model.hardware.centralprocessor.CentralProcessorImpl
import com.tecknobit.kinfo.model.hardware.computersystem.ComputerSystemImpl
import com.tecknobit.kinfo.model.hardware.memory.GlobalMemoryImpl
import com.tecknobit.kinfo.model.hardware.storage.HWDiskStoreImpl
import com.tecknobit.kinfo.model.hardware.storage.HWPartitionImpl
import com.tecknobit.kinfo.model.hardware.storage.LogicalVolumeGroupImpl
import oshi.SystemInfo

/**
 * Implementation of the `Hardware` interface.
 * This class provides detailed information about the system's hardware, including processors, memory, storage devices, network interfaces, displays, and more.
 * It lazily loads hardware data using the provided `SystemInfo` object and transforms it into domain-specific objects that implement the relevant interfaces.
 *
 * @param systemInfo The `SystemInfo` object that provides access to the hardware information.
 *
 * @author N7ghtm4r3
 *
 * @see Hardware
 */
class HardwareImpl(
    systemInfo: SystemInfo
) : Hardware {

    /**
     * `hardwareInfo` Contains the raw hardware data from the `SystemInfo` object.
     * This object is lazily loaded, which makes it easier to access system-specific details like processor, memory, and more.
     */
    private val hardwareInfo by lazy { systemInfo.hardware }

    /**
     * `computerSystem` The computer system information, including manufacturer, model, serial number, etc.
     * It is lazily loaded using the hardwareInfo object.
     */
    override val computerSystem: ComputerSystem by lazy {
        ComputerSystemImpl(
            computerSystemInfo = hardwareInfo.computerSystem
        )
    }

    /**
     * `centralProcessor` The central processor (CPU) information, including processor details like name, cores, threads, etc.
     * It is lazily loaded using the hardwareInfo object.
     */
    override val centralProcessor: CentralProcessor by lazy {
        CentralProcessorImpl(
            centralProcessorInfo = hardwareInfo.processor
        )
    }

    /**
     * `globalMemory` The global memory (RAM) information, including total, available memory, and other memory-related stats.
     * It is lazily loaded using the hardwareInfo object.
     */
    override val globalMemory: GlobalMemory by lazy {
        GlobalMemoryImpl(
            globalMemory = hardwareInfo.memory
        )
    }

    /**
     * `powerSources` List of power sources (e.g., battery or AC power) available in the system.
     * The list is generated by loading power source data from the hardwareInfo object.
     */
    override val powerSources: List<PowerSource>
        get() = loadPowerSources(
            sourceList = hardwareInfo.powerSources
        )

    /**
     * `diskStores` List of storage devices (disks) in the system.
     * The list is generated by loading disk information from the hardwareInfo object.
     */
    override val diskStores: List<HWDiskStore>
        get() = loadDisks(
            sourceList = hardwareInfo.diskStores
        )

    /**
     * `logicalVolumeGroups` List of logical volume groups on the system.
     * The list is generated by loading logical volume group information from the hardwareInfo object.
     */
    override val logicalVolumeGroups: List<LogicalVolumeGroup>
        get() = loadLogicalVolumeGroup(
            sourceList = hardwareInfo.logicalVolumeGroups
        )

    /**
     * `networkIFs` List of network interfaces (e.g., Ethernet, Wi-Fi).
     * The list is generated by loading network interface information from the hardwareInfo object.
     */
    override val networkIFs: List<NetworkIF>
        get() = loadNetworkIf(
            sourceList = hardwareInfo.networkIFs
        )

    /**
     * `displays` List of displays connected to the system.
     * The list is generated by loading display information from the hardwareInfo object.
     */
    override val displays: List<Display>
        get() = loadDisplays(sourceList = hardwareInfo.displays)

    /**
     * `sensors` The system's sensors (e.g., temperature, fan speed).
     * The sensor data is lazily loaded from the hardwareInfo object.
     */
    override val sensors: Sensors by lazy {
        SensorsImpl(
            sensorsInfo = hardwareInfo.sensors)
    }

    /**
     * `soundCards` List of sound cards available on the system.
     * The list is generated by loading sound card data from the hardwareInfo object.
     */
    override val soundCards: List<SoundCard>
        get() = loadSoundcards(
            sourceList = hardwareInfo.soundCards
        )

    /**
     * `graphicsCards` List of graphics cards available on the system.
     * The list is generated by loading graphics card data from the hardwareInfo object.
     */
    override val graphicsCards: List<GraphicsCard>
        get() = loadGraphicCards(
            sourceList = hardwareInfo.graphicsCards
        )

    /**
     * Retrieves the network interfaces, with the option to include local interfaces.
     *
     * @param includeLocalInterfaces Whether to include local interfaces (such as loopback).
     * @return A list of `NetworkIF` objects representing the network interfaces.
     */
    @Bridge
    override fun getNetworkIfs(
        includeLocalInterfaces: Boolean
    ): List<NetworkIF> {
        return loadNetworkIf(
            sourceList = hardwareInfo.getNetworkIFs(includeLocalInterfaces)
        )
    }

    /**
     * `getUsbDevices` Retrieves the USB devices connected to the system, with the option to represent them as a device tree.
     *
     * @param tree Whether to return a tree structure of connected devices.
     * @return A list of `UsbDevice` objects representing the USB devices.
     */
    @Bridge
    override fun getUsbDevices(
        tree: Boolean
    ): List<UsbDevice> {
        return loadUsbDevices(
            sourceList = hardwareInfo.getUsbDevices(tree)
        )
    }

    /**
     * Loads and converts a list of `PowerSource` objects from raw `oshi.hardware.PowerSource` data.
     *
     * @param sourceList A list of raw power source information.
     * @return A list of `PowerSource` objects.
     */
    private fun loadPowerSources(
        sourceList: List<oshi.hardware.PowerSource>
    ): List<PowerSource> {
        val result = mutableListOf<PowerSource>()
        sourceList.forEach { source ->
            result.add(PowerSourceImpl(powerSourceInfo = source))
        }
        return result
    }

    /**
     * Loads and converts a list of `HWDiskStore` objects from raw `oshi.hardware.HWDiskStore` data.
     *
     * @param sourceList A list of raw disk information.
     * @return A list of `HWDiskStore` objects.
     */
    private fun loadDisks(
        sourceList: List<oshi.hardware.HWDiskStore>
    ): List<HWDiskStore> {
        val result = mutableListOf<HWDiskStore>()
        sourceList.forEach { disk ->
            result.add(
                HWDiskStoreImpl(
                    name = disk.name,
                    model = disk.model,
                    serial = disk.serial,
                    size = disk.size,
                    reads = disk.reads,
                    readBytes = disk.readBytes,
                    writes = disk.readBytes,
                    writesBytes = disk.writeBytes,
                    currentQueueLength = disk.currentQueueLength,
                    transferTime = disk.transferTime,
                    partitions = loadPartitions(
                        sourceList = disk.partitions
                    ),
                    timestamp = disk.timeStamp,
                    updateAttributes = disk.updateAttributes()
                )
            )
        }
        return result
    }

    /**
     * Loads and converts a list of `HWPartition` objects from raw `oshi.hardware.HWPartition` data.
     *
     * @param sourceList A list of raw partition information.
     * @return A list of `HWPartition` objects.
     */
    private fun loadPartitions(
        sourceList: List<oshi.hardware.HWPartition>
    ): List<HWPartition> {
        val result = mutableListOf<HWPartition>()
        sourceList.forEach { partition ->
            result.add(
                HWPartitionImpl(
                    identification = partition.identification,
                    name = partition.name,
                    type = partition.type,
                    uuid = partition.uuid,
                    size = partition.size,
                    major = partition.major,
                    minor = partition.minor,
                    mountPoint = partition.mountPoint
                )
            )
        }
        return result
    }

    /**
     * Loads and converts a list of `LogicalVolumeGroup` objects from raw `oshi.hardware.LogicalVolumeGroup` data.
     *
     * @param sourceList A list of raw logical volume group information.
     * @return A list of `LogicalVolumeGroup` objects.
     */
    private fun loadLogicalVolumeGroup(
        sourceList: List<oshi.hardware.LogicalVolumeGroup>
    ): List<LogicalVolumeGroup> {
        val result = mutableListOf<LogicalVolumeGroup>()
        sourceList.forEach { volumeGroup ->
            result.add(
                LogicalVolumeGroupImpl(
                    name = volumeGroup.name,
                    physicalVolumes = volumeGroup.physicalVolumes,
                    logicalVolumes = volumeGroup.logicalVolumes
                )
            )
        }
        return result
    }

    /**
     * Loads and converts a list of `NetworkIF` objects from raw `oshi.hardware.NetworkIF` data.
     *
     * @param sourceList A list of raw network interface information.
     * @return A list of `NetworkIF` objects.
     */
    private fun loadNetworkIf(
        sourceList: List<oshi.hardware.NetworkIF>
    ): List<NetworkIF> {
        val result = mutableListOf<NetworkIF>()
        sourceList.forEach { networkIf ->
            result.add(
                NetworkIFImpl(
                    name = networkIf.name,
                    index = networkIf.index,
                    displayName = networkIf.displayName,
                    ifAlias = networkIf.ifAlias,
                    ifOperStatus = IfOperStatus.valueOf(networkIf.ifOperStatus.name),
                    mtu = networkIf.mtu,
                    macaddr = networkIf.macaddr,
                    ipv4addr = networkIf.iPv4addr,
                    subnetMasks = networkIf.subnetMasks,
                    ipv6addr = networkIf.iPv6addr,
                    prefixLengths = networkIf.prefixLengths,
                    ifType = networkIf.ifType,
                    ndisPhysicalMediumType = networkIf.ndisPhysicalMediumType,
                    isConnectorPresent = networkIf.isConnectorPresent,
                    bytesRecv = networkIf.bytesRecv,
                    bytesSent = networkIf.bytesSent,
                    packetsRecv = networkIf.packetsRecv,
                    packetsSent = networkIf.packetsSent,
                    inErrors = networkIf.inErrors,
                    outErrors = networkIf.outErrors,
                    inDrops = networkIf.inDrops,
                    collisions = networkIf.collisions,
                    speed = networkIf.collisions,
                    timestamp = networkIf.timeStamp,
                    isKnownVmMacAddr = networkIf.isKnownVmMacAddr,
                    updateAttributes = networkIf.updateAttributes()
                )
            )
        }
        return result
    }

    /**
     * Loads and converts a list of `Display` objects from raw `oshi.hardware.Display` data.
     *
     * @param sourceList A list of raw display information.
     * @return A list of `Display` objects.
     */
    private fun loadDisplays(
        sourceList: List<oshi.hardware.Display>
    ): List<Display> {
        val result = mutableListOf<Display>()
        sourceList.forEach { display ->
            result.add(DisplayImpl(edid = display.edid))
        }
        return result
    }

    /**
     * Loads and converts a list of `UsbDevice` objects from raw `oshi.hardware.UsbDevice` data.
     *
     * @param sourceList A list of raw USB device information.
     * @return A list of `UsbDevice` objects.
     */
    private fun loadUsbDevices(
        sourceList: List<oshi.hardware.UsbDevice>
    ): List<UsbDevice> {
        val result = mutableListOf<UsbDevice>()
        sourceList.forEach { usbDevice ->
            val connectedDevices = loadUsbDevices(sourceList = usbDevice.connectedDevices)
            result.add(
                UsbDeviceImpl(
                    name = usbDevice.name,
                    vendor = usbDevice.vendor,
                    vendorId = usbDevice.vendorId,
                    productId = usbDevice.productId,
                    serialNumber = usbDevice.serialNumber,
                    uniqueDeviceId = usbDevice.uniqueDeviceId,
                    connectedDevices = connectedDevices
                )
            )
        }
        return result
    }

    /**
     * Loads and converts a list of `SoundCard` objects from raw `oshi.hardware.SoundCard` data.
     *
     * @param sourceList A list of raw sound card information.
     * @return A list of `SoundCard` objects.
     */
    private fun loadSoundcards(
        sourceList: List<oshi.hardware.SoundCard>
    ): List<SoundCard> {
        val result = mutableListOf<SoundCard>()
        sourceList.forEach { card ->
            result.add(
                SoundCardImpl(
                    driverVersion = card.driverVersion,
                    name = card.name,
                    codec = card.codec
                )
            )
        }
        return result
    }

    /**
     * Loads and converts a list of `GraphicsCard` objects from raw `oshi.hardware.GraphicsCard` data.
     *
     * @param sourceList A list of raw graphics card information.
     * @return A list of `GraphicsCard` objects.
     */
    private fun loadGraphicCards(
        sourceList: List<oshi.hardware.GraphicsCard>
    ): List<GraphicsCard> {
        val result = mutableListOf<GraphicsCard>()
        sourceList.forEach { card ->
            result.add(
                GraphicsCardImpl(
                    name = card.name,
                    deviceId = card.deviceId,
                    vendor = card.vendor,
                    versionInfo = card.versionInfo,
                    vRam = card.vRam
                )
            )
        }
        return result
    }

}
